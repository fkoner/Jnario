/*
* generated by Xtext
*/

package org.jnario.feature.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtend.core.services.XtendGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class FeatureGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FeatureFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cXtendClassesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXtendClassesFeatureParserRuleCall_3_0 = (RuleCall)cXtendClassesAssignment_3.eContents().get(0);
		
		//FeatureFile returns xtend::XtendFile:
		//	{FeatureFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=Feature?;
		public ParserRule getRule() { return rule; }

		//{FeatureFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=Feature?
		public Group getGroup() { return cGroup; }

		//{FeatureFile}
		public Action getFeatureFileAction_0() { return cFeatureFileAction_0; }

		//("package" package=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//"package"
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//xtendClasses+=Feature?
		public Assignment getXtendClassesAssignment_3() { return cXtendClassesAssignment_3; }

		//Feature
		public RuleCall getXtendClassesFeatureParserRuleCall_3_0() { return cXtendClassesFeatureParserRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0_0 = (Keyword)cStaticAssignment_1_0_0.eContents().get(0);
		private final Assignment cExtensionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExtensionExtensionKeyword_1_0_1_0 = (Keyword)cExtensionAssignment_1_0_1.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cImportedTypeJvmTypeCrossReference_1_0_2_0 = (CrossReference)cImportedTypeAssignment_1_0_2.eContents().get(0);
		private final RuleCall cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1 = (RuleCall)cImportedTypeJvmTypeCrossReference_1_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cImportedTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedTypeJvmTypeCrossReference_1_1_0 = (CrossReference)cImportedTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedTypeJvmTypeCrossReference_1_1_0.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0 = (RuleCall)cImportedNamespaceAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import returns xtend::XtendImport:
		//	"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//	importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard) ";"?;
		public ParserRule getRule() { return rule; }

		//"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard) ";"?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
		//importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//static?="static"
		public Assignment getStaticAssignment_1_0_0() { return cStaticAssignment_1_0_0; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_0_0() { return cStaticStaticKeyword_1_0_0_0; }

		//extension?="extension"?
		public Assignment getExtensionAssignment_1_0_1() { return cExtensionAssignment_1_0_1; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_1_0_1_0() { return cExtensionExtensionKeyword_1_0_1_0; }

		//importedType=[types::JvmType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_0_2() { return cImportedTypeAssignment_1_0_2; }

		//[types::JvmType|QualifiedName]
		public CrossReference getImportedTypeJvmTypeCrossReference_1_0_2_0() { return cImportedTypeJvmTypeCrossReference_1_0_2_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1() { return cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_0_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_3() { return cFullStopKeyword_1_0_3; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_4() { return cAsteriskKeyword_1_0_4; }

		//importedType=[types::JvmType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_1() { return cImportedTypeAssignment_1_1; }

		//[types::JvmType|QualifiedName]
		public CrossReference getImportedTypeJvmTypeCrossReference_1_1_0() { return cImportedTypeJvmTypeCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1() { return cImportedTypeJvmTypeQualifiedNameParserRuleCall_1_1_0_1; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1_2() { return cImportedNamespaceAssignment_1_2; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFEATURE_TEXTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionTEXTTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cBackgroundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBackgroundBackgroundParserRuleCall_4_0 = (RuleCall)cBackgroundAssignment_4.eContents().get(0);
		private final Assignment cScenariosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScenariosScenarioParserRuleCall_5_0 = (RuleCall)cScenariosAssignment_5.eContents().get(0);
		
		//Feature returns xtend::XtendClass:
		//	{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? background=Background? scenarios+=Scenario*;
		public ParserRule getRule() { return rule; }

		//{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? background=Background? scenarios+=Scenario*
		public Group getGroup() { return cGroup; }

		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//name=FEATURE_TEXT
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FEATURE_TEXT
		public RuleCall getNameFEATURE_TEXTTerminalRuleCall_2_0() { return cNameFEATURE_TEXTTerminalRuleCall_2_0; }

		//description=TEXT?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//TEXT
		public RuleCall getDescriptionTEXTTerminalRuleCall_3_0() { return cDescriptionTEXTTerminalRuleCall_3_0; }

		//background=Background?
		public Assignment getBackgroundAssignment_4() { return cBackgroundAssignment_4; }

		//Background
		public RuleCall getBackgroundBackgroundParserRuleCall_4_0() { return cBackgroundBackgroundParserRuleCall_4_0; }

		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_5() { return cScenariosAssignment_5; }

		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_5_0() { return cScenariosScenarioParserRuleCall_5_0; }
	}

	public class XAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnnotationTypeJvmAnnotationTypeCrossReference_2_0 = (CrossReference)cAnnotationTypeAssignment_2.eContents().get(0);
		private final RuleCall cAnnotationTypeJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAnnotationTypeJvmAnnotationTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0 = (RuleCall)cElementValuePairsAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cElementValuePairsAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0 = (RuleCall)cElementValuePairsAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cValueXAnnotationElementValueParserRuleCall_3_1_1_0 = (RuleCall)cValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//XAnnotation returns xannotations::XAnnotation:
		//	{xannotations::XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
		//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
		//	value=XAnnotationElementValue)? ")")?;
		public ParserRule getRule() { return rule; }

		//{xannotations::XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
		//(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
		//value=XAnnotationElementValue)? ")")?
		public Group getGroup() { return cGroup; }

		//{xannotations::XAnnotation}
		public Action getXAnnotationAction_0() { return cXAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//annotationType=[types::JvmAnnotationType|QualifiedName]
		public Assignment getAnnotationTypeAssignment_2() { return cAnnotationTypeAssignment_2; }

		//[types::JvmAnnotationType|QualifiedName]
		public CrossReference getAnnotationTypeJvmAnnotationTypeCrossReference_2_0() { return cAnnotationTypeJvmAnnotationTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getAnnotationTypeJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1() { return cAnnotationTypeJvmAnnotationTypeQualifiedNameParserRuleCall_2_0_1; }

		//(=> "(" (elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
		//value=XAnnotationElementValue)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
		//value=XAnnotationElementValue)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//elementValuePairs+=XAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_3_1_0_0() { return cElementValuePairsAssignment_3_1_0_0; }

		//XAnnotationElementValuePair
		public RuleCall getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0() { return cElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_0_0; }

		//("," elementValuePairs+=XAnnotationElementValuePair)*
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }

		//","
		public Keyword getCommaKeyword_3_1_0_1_0() { return cCommaKeyword_3_1_0_1_0; }

		//elementValuePairs+=XAnnotationElementValuePair
		public Assignment getElementValuePairsAssignment_3_1_0_1_1() { return cElementValuePairsAssignment_3_1_0_1_1; }

		//XAnnotationElementValuePair
		public RuleCall getElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0() { return cElementValuePairsXAnnotationElementValuePairParserRuleCall_3_1_0_1_1_0; }

		//value=XAnnotationElementValue
		public Assignment getValueAssignment_3_1_1() { return cValueAssignment_3_1_1; }

		//XAnnotationElementValue
		public RuleCall getValueXAnnotationElementValueParserRuleCall_3_1_1_0() { return cValueXAnnotationElementValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBackgroundAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBACKGROUND_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMemberParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cMembersAlternatives_3_0_0 = (Alternatives)cMembersAssignment_3_0.eContents().get(0);
		private final RuleCall cMembersGivenParserRuleCall_3_0_0_0 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cMembersGivenReferenceParserRuleCall_3_0_0_1 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cMembersAlternatives_3_1_0 = (Alternatives)cMembersAssignment_3_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_3_1_0_0 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_3_1_0_1 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(1);
		
		//Background:
		//	{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And |
		//	AndReference)*)?;
		public ParserRule getRule() { return rule; }

		//{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference)*)?
		public Group getGroup() { return cGroup; }

		//{Background}
		public Action getBackgroundAction_0() { return cBackgroundAction_0; }

		//name=BACKGROUND_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//BACKGROUND_TEXT
		public RuleCall getNameBACKGROUND_TEXTTerminalRuleCall_1_0() { return cNameBACKGROUND_TEXTTerminalRuleCall_1_0; }

		//members+=Member*
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_0() { return cMembersMemberParserRuleCall_2_0; }

		//(members+=(Given | GivenReference) members+=(And | AndReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//members+=(Given | GivenReference)
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }

		//Given | GivenReference
		public Alternatives getMembersAlternatives_3_0_0() { return cMembersAlternatives_3_0_0; }

		//Given
		public RuleCall getMembersGivenParserRuleCall_3_0_0_0() { return cMembersGivenParserRuleCall_3_0_0_0; }

		//GivenReference
		public RuleCall getMembersGivenReferenceParserRuleCall_3_0_0_1() { return cMembersGivenReferenceParserRuleCall_3_0_0_1; }

		//members+=(And | AndReference)*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//And | AndReference
		public Alternatives getMembersAlternatives_3_1_0() { return cMembersAlternatives_3_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_3_1_0_0() { return cMembersAndParserRuleCall_3_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_3_1_0_1() { return cMembersAndReferenceParserRuleCall_3_1_0_1; }
	}

	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScenarioAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSCENARIO_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMemberParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cMembersAlternatives_3_0_0 = (Alternatives)cMembersAssignment_3_0.eContents().get(0);
		private final RuleCall cMembersGivenParserRuleCall_3_0_0_0 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cMembersGivenReferenceParserRuleCall_3_0_0_1 = (RuleCall)cMembersAlternatives_3_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cMembersAlternatives_3_1_0 = (Alternatives)cMembersAssignment_3_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_3_1_0_0 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_3_1_0_1 = (RuleCall)cMembersAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cMembersAlternatives_4_0_0 = (Alternatives)cMembersAssignment_4_0.eContents().get(0);
		private final RuleCall cMembersWhenParserRuleCall_4_0_0_0 = (RuleCall)cMembersAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cMembersWhenReferenceParserRuleCall_4_0_0_1 = (RuleCall)cMembersAlternatives_4_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cMembersAlternatives_4_1_0 = (Alternatives)cMembersAssignment_4_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_4_1_0_0 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_4_1_0_1 = (RuleCall)cMembersAlternatives_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cMembersAlternatives_5_0_0 = (Alternatives)cMembersAssignment_5_0.eContents().get(0);
		private final RuleCall cMembersThenParserRuleCall_5_0_0_0 = (RuleCall)cMembersAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cMembersThenReferenceParserRuleCall_5_0_0_1 = (RuleCall)cMembersAlternatives_5_0_0.eContents().get(1);
		private final Assignment cMembersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cMembersAlternatives_5_1_0 = (Alternatives)cMembersAssignment_5_1.eContents().get(0);
		private final RuleCall cMembersAndParserRuleCall_5_1_0_0 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cMembersAndReferenceParserRuleCall_5_1_0_1 = (RuleCall)cMembersAlternatives_5_1_0.eContents().get(1);
		
		//Scenario:
		//	{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference)*)?
		//	(members+=(When | WhenReference) members+=(And | AndReference)*)? (members+=(Then | ThenReference) members+=(And |
		//	AndReference)*)?;
		public ParserRule getRule() { return rule; }

		//{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference)*)?
		//(members+=(When | WhenReference) members+=(And | AndReference)*)? (members+=(Then | ThenReference) members+=(And |
		//AndReference)*)?
		public Group getGroup() { return cGroup; }

		//{Scenario}
		public Action getScenarioAction_0() { return cScenarioAction_0; }

		//name=SCENARIO_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SCENARIO_TEXT
		public RuleCall getNameSCENARIO_TEXTTerminalRuleCall_1_0() { return cNameSCENARIO_TEXTTerminalRuleCall_1_0; }

		//members+=Member*
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_0() { return cMembersMemberParserRuleCall_2_0; }

		//(members+=(Given | GivenReference) members+=(And | AndReference)*)?
		public Group getGroup_3() { return cGroup_3; }

		//members+=(Given | GivenReference)
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }

		//Given | GivenReference
		public Alternatives getMembersAlternatives_3_0_0() { return cMembersAlternatives_3_0_0; }

		//Given
		public RuleCall getMembersGivenParserRuleCall_3_0_0_0() { return cMembersGivenParserRuleCall_3_0_0_0; }

		//GivenReference
		public RuleCall getMembersGivenReferenceParserRuleCall_3_0_0_1() { return cMembersGivenReferenceParserRuleCall_3_0_0_1; }

		//members+=(And | AndReference)*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//And | AndReference
		public Alternatives getMembersAlternatives_3_1_0() { return cMembersAlternatives_3_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_3_1_0_0() { return cMembersAndParserRuleCall_3_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_3_1_0_1() { return cMembersAndReferenceParserRuleCall_3_1_0_1; }

		//(members+=(When | WhenReference) members+=(And | AndReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//members+=(When | WhenReference)
		public Assignment getMembersAssignment_4_0() { return cMembersAssignment_4_0; }

		//When | WhenReference
		public Alternatives getMembersAlternatives_4_0_0() { return cMembersAlternatives_4_0_0; }

		//When
		public RuleCall getMembersWhenParserRuleCall_4_0_0_0() { return cMembersWhenParserRuleCall_4_0_0_0; }

		//WhenReference
		public RuleCall getMembersWhenReferenceParserRuleCall_4_0_0_1() { return cMembersWhenReferenceParserRuleCall_4_0_0_1; }

		//members+=(And | AndReference)*
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//And | AndReference
		public Alternatives getMembersAlternatives_4_1_0() { return cMembersAlternatives_4_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_4_1_0_0() { return cMembersAndParserRuleCall_4_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_4_1_0_1() { return cMembersAndReferenceParserRuleCall_4_1_0_1; }

		//(members+=(Then | ThenReference) members+=(And | AndReference)*)?
		public Group getGroup_5() { return cGroup_5; }

		//members+=(Then | ThenReference)
		public Assignment getMembersAssignment_5_0() { return cMembersAssignment_5_0; }

		//Then | ThenReference
		public Alternatives getMembersAlternatives_5_0_0() { return cMembersAlternatives_5_0_0; }

		//Then
		public RuleCall getMembersThenParserRuleCall_5_0_0_0() { return cMembersThenParserRuleCall_5_0_0_0; }

		//ThenReference
		public RuleCall getMembersThenReferenceParserRuleCall_5_0_0_1() { return cMembersThenReferenceParserRuleCall_5_0_0_1; }

		//members+=(And | AndReference)*
		public Assignment getMembersAssignment_5_1() { return cMembersAssignment_5_1; }

		//And | AndReference
		public Alternatives getMembersAlternatives_5_1_0() { return cMembersAlternatives_5_1_0; }

		//And
		public RuleCall getMembersAndParserRuleCall_5_1_0_0() { return cMembersAndParserRuleCall_5_1_0_0; }

		//AndReference
		public RuleCall getMembersAndReferenceParserRuleCall_5_1_0_1() { return cMembersAndReferenceParserRuleCall_5_1_0_1; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cXtendFieldAnnotationInfoAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVisibilityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_1_0 = (RuleCall)cVisibilityAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final Assignment cExtensionAssignment_2_2_0_0 = (Assignment)cGroup_2_2_0.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_2_2_0_0_0 = (Keyword)cExtensionAssignment_2_2_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_2_2_0_1_0 = (Keyword)cStaticAssignment_2_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2_0_2 = (Alternatives)cGroup_2_2_0.eContents().get(2);
		private final Assignment cFinalAssignment_2_2_0_2_0 = (Assignment)cAlternatives_2_2_0_2.eContents().get(0);
		private final Keyword cFinalValKeyword_2_2_0_2_0_0 = (Keyword)cFinalAssignment_2_2_0_2_0.eContents().get(0);
		private final Keyword cVarKeyword_2_2_0_2_1 = (Keyword)cAlternatives_2_2_0_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_0_3 = (Assignment)cGroup_2_2_0.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_0_3_0 = (RuleCall)cTypeAssignment_2_2_0_3.eContents().get(0);
		private final Assignment cNameAssignment_2_2_0_4 = (Assignment)cGroup_2_2_0.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_2_2_0_4_0 = (RuleCall)cNameAssignment_2_2_0_4.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cAlternatives_2_2.eContents().get(1);
		private final Assignment cStaticAssignment_2_2_1_0 = (Assignment)cGroup_2_2_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_2_2_1_0_0 = (Keyword)cStaticAssignment_2_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1_1 = (Alternatives)cGroup_2_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_1_1_0 = (Assignment)cAlternatives_2_2_1_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_1_1_0_0 = (RuleCall)cTypeAssignment_2_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_2_1_1_1 = (Group)cAlternatives_2_2_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2_2_1_1_1_0 = (Alternatives)cGroup_2_2_1_1_1.eContents().get(0);
		private final Assignment cFinalAssignment_2_2_1_1_1_0_0 = (Assignment)cAlternatives_2_2_1_1_1_0.eContents().get(0);
		private final Keyword cFinalValKeyword_2_2_1_1_1_0_0_0 = (Keyword)cFinalAssignment_2_2_1_1_1_0_0.eContents().get(0);
		private final Keyword cVarKeyword_2_2_1_1_1_0_1 = (Keyword)cAlternatives_2_2_1_1_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_1_1_1_1 = (Assignment)cGroup_2_2_1_1_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_2_1_1_1_1_0 = (RuleCall)cTypeAssignment_2_2_1_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1_2 = (Assignment)cGroup_2_2_1.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_2_1_2_0 = (RuleCall)cNameAssignment_2_2_1_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_3_1_0 = (RuleCall)cInitialValueAssignment_2_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Member returns xtend::XtendMember:
		//	{xtend::XtendMember} annotations+=XAnnotation* ({xtend::XtendField.annotationInfo=current} visibility=Visibility?
		//	(extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID? |
		//	static?="static"? (type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID) ("="
		//	initialValue=XExpression)? ";"?);
		public ParserRule getRule() { return rule; }

		//{xtend::XtendMember} annotations+=XAnnotation* ({xtend::XtendField.annotationInfo=current} visibility=Visibility?
		//(extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID? |
		//static?="static"? (type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID) ("="
		//initialValue=XExpression)? ";"?)
		public Group getGroup() { return cGroup; }

		//{xtend::XtendMember}
		public Action getXtendMemberAction_0() { return cXtendMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
		//(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
		//| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"?
		public Group getGroup_2() { return cGroup_2; }

		//{xtend::XtendField.annotationInfo=current}
		public Action getXtendFieldAnnotationInfoAction_2_0() { return cXtendFieldAnnotationInfoAction_2_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2_1() { return cVisibilityAssignment_2_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_1_0() { return cVisibilityVisibilityEnumRuleCall_2_1_0; }

		//extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"?
		//(type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID?
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }

		//extension?="extension"
		public Assignment getExtensionAssignment_2_2_0_0() { return cExtensionAssignment_2_2_0_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_2_2_0_0_0() { return cExtensionExtensionKeyword_2_2_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_2_2_0_1() { return cStaticAssignment_2_2_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_2_2_0_1_0() { return cStaticStaticKeyword_2_2_0_1_0; }

		//(final?="val" | "var")?
		public Alternatives getAlternatives_2_2_0_2() { return cAlternatives_2_2_0_2; }

		//final?="val"
		public Assignment getFinalAssignment_2_2_0_2_0() { return cFinalAssignment_2_2_0_2_0; }

		//"val"
		public Keyword getFinalValKeyword_2_2_0_2_0_0() { return cFinalValKeyword_2_2_0_2_0_0; }

		//"var"
		public Keyword getVarKeyword_2_2_0_2_1() { return cVarKeyword_2_2_0_2_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_2_0_3() { return cTypeAssignment_2_2_0_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_0_3_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_0_3_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_2_0_4() { return cNameAssignment_2_2_0_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_0_4_0() { return cNameValidIDParserRuleCall_2_2_0_4_0; }

		//static?="static"? (type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//static?="static"?
		public Assignment getStaticAssignment_2_2_1_0() { return cStaticAssignment_2_2_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_2_2_1_0_0() { return cStaticStaticKeyword_2_2_1_0_0; }

		//type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?
		public Alternatives getAlternatives_2_2_1_1() { return cAlternatives_2_2_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_2_1_1_0() { return cTypeAssignment_2_2_1_1_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_1_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_1_1_0_0; }

		//(final?="val" | "var") type=JvmTypeReference?
		public Group getGroup_2_2_1_1_1() { return cGroup_2_2_1_1_1; }

		//final?="val" | "var"
		public Alternatives getAlternatives_2_2_1_1_1_0() { return cAlternatives_2_2_1_1_1_0; }

		//final?="val"
		public Assignment getFinalAssignment_2_2_1_1_1_0_0() { return cFinalAssignment_2_2_1_1_1_0_0; }

		//"val"
		public Keyword getFinalValKeyword_2_2_1_1_1_0_0_0() { return cFinalValKeyword_2_2_1_1_1_0_0_0; }

		//"var"
		public Keyword getVarKeyword_2_2_1_1_1_0_1() { return cVarKeyword_2_2_1_1_1_0_1; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_2_2_1_1_1_1() { return cTypeAssignment_2_2_1_1_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_2_1_1_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_2_1_1_1_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_2_1_2() { return cNameAssignment_2_2_1_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_2_1_2_0() { return cNameValidIDParserRuleCall_2_2_1_2_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"="
		public Keyword getEqualsSignKeyword_2_3_0() { return cEqualsSignKeyword_2_3_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_3_1() { return cInitialValueAssignment_2_3_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_3_1_0() { return cInitialValueXExpressionParserRuleCall_2_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}

	public class GivenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GivenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGivenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceGivenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceGivenCrossReference_1_0.eContents().get(1);
		
		//GivenReference:
		//	{GivenReference} reference=[Given|GIVEN_TEXT];
		public ParserRule getRule() { return rule; }

		//{GivenReference} reference=[Given|GIVEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{GivenReference}
		public Action getGivenReferenceAction_0() { return cGivenReferenceAction_0; }

		//reference=[Given|GIVEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Given|GIVEN_TEXT]
		public CrossReference getReferenceGivenCrossReference_1_0() { return cReferenceGivenCrossReference_1_0; }

		//GIVEN_TEXT
		public RuleCall getReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceGivenGIVEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGivenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameGIVEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Given:
		//	{Given} name=GIVEN_TEXT expression=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{Given} name=GIVEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{Given}
		public Action getGivenAction_0() { return cGivenAction_0; }

		//name=GIVEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//GIVEN_TEXT
		public RuleCall getNameGIVEN_TEXTTerminalRuleCall_1_0() { return cNameGIVEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class WhenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceWhenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceWhenCrossReference_1_0.eContents().get(1);
		
		//WhenReference:
		//	{WhenReference} reference=[When|WHEN_TEXT];
		public ParserRule getRule() { return rule; }

		//{WhenReference} reference=[When|WHEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{WhenReference}
		public Action getWhenReferenceAction_0() { return cWhenReferenceAction_0; }

		//reference=[When|WHEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[When|WHEN_TEXT]
		public CrossReference getReferenceWhenCrossReference_1_0() { return cReferenceWhenCrossReference_1_0; }

		//WHEN_TEXT
		public RuleCall getReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceWhenWHEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//When:
		//	{When} name=WHEN_TEXT expression=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{When} name=WHEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{When}
		public Action getWhenAction_0() { return cWhenAction_0; }

		//name=WHEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//WHEN_TEXT
		public RuleCall getNameWHEN_TEXTTerminalRuleCall_1_0() { return cNameWHEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class ThenReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThenReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceThenCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceThenCrossReference_1_0.eContents().get(1);
		
		//ThenReference:
		//	{ThenReference} reference=[Then|THEN_TEXT];
		public ParserRule getRule() { return rule; }

		//{ThenReference} reference=[Then|THEN_TEXT]
		public Group getGroup() { return cGroup; }

		//{ThenReference}
		public Action getThenReferenceAction_0() { return cThenReferenceAction_0; }

		//reference=[Then|THEN_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Then|THEN_TEXT]
		public CrossReference getReferenceThenCrossReference_1_0() { return cReferenceThenCrossReference_1_0; }

		//THEN_TEXT
		public RuleCall getReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1() { return cReferenceThenTHEN_TEXTTerminalRuleCall_1_0_1; }
	}

	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThenAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTHEN_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Then:
		//	{Then} name=THEN_TEXT expression=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{Then} name=THEN_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{Then}
		public Action getThenAction_0() { return cThenAction_0; }

		//name=THEN_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//THEN_TEXT
		public RuleCall getNameTHEN_TEXTTerminalRuleCall_1_0() { return cNameTHEN_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class AndReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceAndCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceAndAND_TEXTTerminalRuleCall_1_0_1 = (RuleCall)cReferenceAndCrossReference_1_0.eContents().get(1);
		
		//AndReference:
		//	{AndReference} reference=[And|AND_TEXT];
		public ParserRule getRule() { return rule; }

		//{AndReference} reference=[And|AND_TEXT]
		public Group getGroup() { return cGroup; }

		//{AndReference}
		public Action getAndReferenceAction_0() { return cAndReferenceAction_0; }

		//reference=[And|AND_TEXT]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[And|AND_TEXT]
		public CrossReference getReferenceAndCrossReference_1_0() { return cReferenceAndCrossReference_1_0; }

		//AND_TEXT
		public RuleCall getReferenceAndAND_TEXTTerminalRuleCall_1_0_1() { return cReferenceAndAND_TEXTTerminalRuleCall_1_0_1; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAND_TEXTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//And:
		//	{And} name=AND_TEXT expression=BlockExpression;
		public ParserRule getRule() { return rule; }

		//{And} name=AND_TEXT expression=BlockExpression
		public Group getGroup() { return cGroup; }

		//{And}
		public Action getAndAction_0() { return cAndAction_0; }

		//name=AND_TEXT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AND_TEXT
		public RuleCall getNameAND_TEXTTerminalRuleCall_1_0() { return cNameAND_TEXTTerminalRuleCall_1_0; }

		//expression=BlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//BlockExpression
		public RuleCall getExpressionBlockExpressionParserRuleCall_2_0() { return cExpressionBlockExpressionParserRuleCall_2_0; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *
		// * artificial node to simplify folding
		// * / BlockExpression returns xbase::XBlockExpression:
		//	(expressions+=XExpressionInsideBlock ";"?)+;
		public ParserRule getRule() { return rule; }

		//(expressions+=XExpressionInsideBlock ";"?)+
		public Group getGroup() { return cGroup; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXDoWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAssertionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		////ExampleTable:
		////	name=EXAMPLE_TEXT
		////	columns+=ExampleColumn+ EXAMPLE_ROW_END
		////	(rows += ExampleRow)*;
		////
		////
		////ExampleColumn: 
		////	(PIPE | PIPE_SPACES) type=JvmTypeReference? name=ValidID ;
		////
		////ExampleRow:
		////	((PIPE | PIPE_SPACES) cells+=XExpression)+ EXAMPLE_ROW_END;
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
		//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//	XParenthesizedExpression | Assertion;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression |
		//XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//XParenthesizedExpression | Assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_7() { return cXWhileExpressionParserRuleCall_7; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_8() { return cXDoWhileExpressionParserRuleCall_8; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_9() { return cXThrowExpressionParserRuleCall_9; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_11() { return cXTryCatchFinallyExpressionParserRuleCall_11; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_12() { return cXParenthesizedExpressionParserRuleCall_12; }

		//Assertion
		public RuleCall getAssertionParserRuleCall_13() { return cAssertionParserRuleCall_13; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cShouldLeftOperandAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0 = (RuleCall)cRightOperandAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cShouldThrowExpressionAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_0_0_1_0 = (Group)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Keyword cShouldKeyword_1_1_0_0_1_0_0 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(0);
		private final Keyword cThrowKeyword_1_1_0_0_1_0_1 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(1);
		private final Keyword cThrowsKeyword_1_1_0_0_1_1 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_0_0 = (Group)cGroup_1_3_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_3_0_0_0 = (Action)cGroup_1_3_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_3_0_0_1 = (Assignment)cGroup_1_3_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0 = (CrossReference)cFeatureAssignment_1_3_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0 = (RuleCall)cRightOperandAssignment_1_3_1.eContents().get(0);
		
		//XRelationalExpression returns xbase::XExpression:
		//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		//	rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//	({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//	rightOperand=XOtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		//rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		//type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) rightOperand=XOtherOperatorExpression
		//| => ({ShouldThrow.expression=current} ("should" "throw" | "throws")) type=JvmTypeReference | =>
		//({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) rightOperand=XOtherOperatorExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Should.leftOperand=current}
		public Action getShouldLeftOperandAction_1_0_0_0_0() { return cShouldLeftOperandAction_1_0_0_0_0; }

		//feature=[types::JvmIdentifiableElement|Should]
		public Assignment getFeatureAssignment_1_0_0_0_1() { return cFeatureAssignment_1_0_0_0_1; }

		//[types::JvmIdentifiableElement|Should]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0; }

		//Should
		public RuleCall getFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1() { return cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_0_1() { return cRightOperandAssignment_1_0_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0; }

		//=> ({ShouldThrow.expression=current} ("should" "throw" | "throws")) type=JvmTypeReference
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{ShouldThrow.expression=current} ("should" "throw" | "throws")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{ShouldThrow.expression=current}
		public Action getShouldThrowExpressionAction_1_1_0_0_0() { return cShouldThrowExpressionAction_1_1_0_0_0; }

		//"should" "throw" | "throws"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"should" "throw"
		public Group getGroup_1_1_0_0_1_0() { return cGroup_1_1_0_0_1_0; }

		//"should"
		public Keyword getShouldKeyword_1_1_0_0_1_0_0() { return cShouldKeyword_1_1_0_0_1_0_0; }

		//"throw"
		public Keyword getThrowKeyword_1_1_0_0_1_0_1() { return cThrowKeyword_1_1_0_0_1_0_1; }

		//"throws"
		public Keyword getThrowsKeyword_1_1_0_0_1_1() { return cThrowsKeyword_1_1_0_0_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_1_0; }

		//=> ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({xbase::XInstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{xbase::XInstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{xbase::XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_2_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_2_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_2_0_0_1() { return cInstanceofKeyword_1_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_2_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_2_1_0; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//{xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]
		public Group getGroup_1_3_0_0() { return cGroup_1_3_0_0; }

		//{xbase::XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_3_0_0_0() { return cXBinaryOperationLeftOperandAction_1_3_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getFeatureAssignment_1_3_0_0_1() { return cFeatureAssignment_1_3_0_0_1; }

		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_3_1() { return cRightOperandAssignment_1_3_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0; }
	}

	public class ShouldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Should");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShouldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Should:
		//	"should" "not"? ID;
		public ParserRule getRule() { return rule; }

		//"should" "not"? ID
		public Group getGroup() { return cGroup; }

		//"should"
		public Keyword getShouldKeyword_0() { return cShouldKeyword_0; }

		//"not"?
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXClosureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXTypeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////	| MockLiteral 
		//XLiteral returns xbase::XExpression:
		//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_0() { return cXClosureParserRuleCall_0; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_1() { return cXBooleanLiteralParserRuleCall_1; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_2() { return cXNumberLiteralParserRuleCall_2; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_3() { return cXNullLiteralParserRuleCall_3; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_4() { return cXStringLiteralParserRuleCall_4; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_5() { return cXTypeLiteralParserRuleCall_5; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		////MockLiteral:
		////	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
		////;
		//Assertion:
		//	{Assertion} "assert" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{Assertion} "assert" expression=XExpression
		public Group getGroup() { return cGroup; }

		//{Assertion}
		public Action getAssertionAction_0() { return cAssertionAction_0; }

		//"assert"
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}
	
	
	private FeatureFileElements pFeatureFile;
	private ImportElements pImport;
	private FeatureElements pFeature;
	private XAnnotationElements pXAnnotation;
	private BackgroundElements pBackground;
	private ScenarioElements pScenario;
	private MemberElements pMember;
	private GivenReferenceElements pGivenReference;
	private GivenElements pGiven;
	private WhenReferenceElements pWhenReference;
	private WhenElements pWhen;
	private ThenReferenceElements pThenReference;
	private ThenElements pThen;
	private AndReferenceElements pAndReference;
	private AndElements pAnd;
	private BlockExpressionElements pBlockExpression;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XRelationalExpressionElements pXRelationalExpression;
	private ShouldElements pShould;
	private XLiteralElements pXLiteral;
	private AssertionElements pAssertion;
	private TerminalRule tBACKGROUND_TEXT;
	private TerminalRule tSCENARIO_TEXT;
	private TerminalRule tFEATURE_TEXT;
	private TerminalRule tGIVEN_TEXT;
	private TerminalRule tWHEN_TEXT;
	private TerminalRule tTHEN_TEXT;
	private TerminalRule tAND_TEXT;
	private TerminalRule tTEXT;
	private TerminalRule tSTEP_WITH_ARGS;
	private TerminalRule tMNL;
	private TerminalRule tCOLON;
	private TerminalRule tNL;
	private TerminalRule tSPACES;
	
	private final Grammar grammar;

	private XtendGrammarAccess gaXtend;

	@Inject
	public FeatureGrammarAccess(GrammarProvider grammarProvider,
		XtendGrammarAccess gaXtend) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtend = gaXtend;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.jnario.feature.Feature".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XtendGrammarAccess getXtendGrammarAccess() {
		return gaXtend;
	}

	
	//FeatureFile returns xtend::XtendFile:
	//	{FeatureFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=Feature?;
	public FeatureFileElements getFeatureFileAccess() {
		return (pFeatureFile != null) ? pFeatureFile : (pFeatureFile = new FeatureFileElements());
	}
	
	public ParserRule getFeatureFileRule() {
		return getFeatureFileAccess().getRule();
	}

	//Import returns xtend::XtendImport:
	//	"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
	//	importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard) ";"?;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Feature returns xtend::XtendClass:
	//	{Feature} annotations+=XAnnotation* name=FEATURE_TEXT description=TEXT? background=Background? scenarios+=Scenario*;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//XAnnotation returns xannotations::XAnnotation:
	//	{xannotations::XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XAnnotationElements getXAnnotationAccess() {
		return (pXAnnotation != null) ? pXAnnotation : (pXAnnotation = new XAnnotationElements());
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//Background:
	//	{Background} name=BACKGROUND_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And |
	//	AndReference)*)?;
	public BackgroundElements getBackgroundAccess() {
		return (pBackground != null) ? pBackground : (pBackground = new BackgroundElements());
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}

	//Scenario:
	//	{Scenario} name=SCENARIO_TEXT members+=Member* (members+=(Given | GivenReference) members+=(And | AndReference)*)?
	//	(members+=(When | WhenReference) members+=(And | AndReference)*)? (members+=(Then | ThenReference) members+=(And |
	//	AndReference)*)?;
	public ScenarioElements getScenarioAccess() {
		return (pScenario != null) ? pScenario : (pScenario = new ScenarioElements());
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Member returns xtend::XtendMember:
	//	{xtend::XtendMember} annotations+=XAnnotation* ({xtend::XtendField.annotationInfo=current} visibility=Visibility?
	//	(extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID? |
	//	static?="static"? (type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID) ("="
	//	initialValue=XExpression)? ";"?);
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//GivenReference:
	//	{GivenReference} reference=[Given|GIVEN_TEXT];
	public GivenReferenceElements getGivenReferenceAccess() {
		return (pGivenReference != null) ? pGivenReference : (pGivenReference = new GivenReferenceElements());
	}
	
	public ParserRule getGivenReferenceRule() {
		return getGivenReferenceAccess().getRule();
	}

	//Given:
	//	{Given} name=GIVEN_TEXT expression=BlockExpression;
	public GivenElements getGivenAccess() {
		return (pGiven != null) ? pGiven : (pGiven = new GivenElements());
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}

	//WhenReference:
	//	{WhenReference} reference=[When|WHEN_TEXT];
	public WhenReferenceElements getWhenReferenceAccess() {
		return (pWhenReference != null) ? pWhenReference : (pWhenReference = new WhenReferenceElements());
	}
	
	public ParserRule getWhenReferenceRule() {
		return getWhenReferenceAccess().getRule();
	}

	//When:
	//	{When} name=WHEN_TEXT expression=BlockExpression;
	public WhenElements getWhenAccess() {
		return (pWhen != null) ? pWhen : (pWhen = new WhenElements());
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}

	//ThenReference:
	//	{ThenReference} reference=[Then|THEN_TEXT];
	public ThenReferenceElements getThenReferenceAccess() {
		return (pThenReference != null) ? pThenReference : (pThenReference = new ThenReferenceElements());
	}
	
	public ParserRule getThenReferenceRule() {
		return getThenReferenceAccess().getRule();
	}

	//Then:
	//	{Then} name=THEN_TEXT expression=BlockExpression;
	public ThenElements getThenAccess() {
		return (pThen != null) ? pThen : (pThen = new ThenElements());
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}

	//AndReference:
	//	{AndReference} reference=[And|AND_TEXT];
	public AndReferenceElements getAndReferenceAccess() {
		return (pAndReference != null) ? pAndReference : (pAndReference = new AndReferenceElements());
	}
	
	public ParserRule getAndReferenceRule() {
		return getAndReferenceAccess().getRule();
	}

	//And:
	//	{And} name=AND_TEXT expression=BlockExpression;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	/// *
	// * artificial node to simplify folding
	// * / BlockExpression returns xbase::XBlockExpression:
	//	(expressions+=XExpressionInsideBlock ";"?)+;
	public BlockExpressionElements getBlockExpressionAccess() {
		return (pBlockExpression != null) ? pBlockExpression : (pBlockExpression = new BlockExpressionElements());
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	////ExampleTable:
	////	name=EXAMPLE_TEXT
	////	columns+=ExampleColumn+ EXAMPLE_ROW_END
	////	(rows += ExampleRow)*;
	////
	////
	////ExampleColumn: 
	////	(PIPE | PIPE_SPACES) type=JvmTypeReference? name=ValidID ;
	////
	////ExampleRow:
	////	((PIPE | PIPE_SPACES) cells+=XExpression)+ EXAMPLE_ROW_END;
	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression | Assertion;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XRelationalExpression returns xbase::XExpression:
	//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
	//	rightOperand=XOtherOperatorExpression | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
	//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//Should:
	//	"should" "not"? ID;
	public ShouldElements getShouldAccess() {
		return (pShould != null) ? pShould : (pShould = new ShouldElements());
	}
	
	public ParserRule getShouldRule() {
		return getShouldAccess().getRule();
	}

	////	| MockLiteral 
	//XLiteral returns xbase::XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////MockLiteral:
	////	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
	////;
	//Assertion:
	//	{Assertion} "assert" expression=XExpression;
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//terminal BACKGROUND_TEXT:
	//	"Background:" MNL;
	public TerminalRule getBACKGROUND_TEXTRule() {
		return (tBACKGROUND_TEXT != null) ? tBACKGROUND_TEXT : (tBACKGROUND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BACKGROUND_TEXT"));
	} 

	//terminal SCENARIO_TEXT:
	//	"Scenario:" MNL;
	public TerminalRule getSCENARIO_TEXTRule() {
		return (tSCENARIO_TEXT != null) ? tSCENARIO_TEXT : (tSCENARIO_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCENARIO_TEXT"));
	} 

	//terminal FEATURE_TEXT:
	//	"Feature" COLON->(BACKGROUND_TEXT | SCENARIO_TEXT);
	public TerminalRule getFEATURE_TEXTRule() {
		return (tFEATURE_TEXT != null) ? tFEATURE_TEXT : (tFEATURE_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FEATURE_TEXT"));
	} 

	//terminal GIVEN_TEXT:
	//	"Given " STEP_WITH_ARGS;
	public TerminalRule getGIVEN_TEXTRule() {
		return (tGIVEN_TEXT != null) ? tGIVEN_TEXT : (tGIVEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GIVEN_TEXT"));
	} 

	//terminal WHEN_TEXT:
	//	"When " STEP_WITH_ARGS;
	public TerminalRule getWHEN_TEXTRule() {
		return (tWHEN_TEXT != null) ? tWHEN_TEXT : (tWHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHEN_TEXT"));
	} 

	//terminal THEN_TEXT:
	//	"Then " STEP_WITH_ARGS;
	public TerminalRule getTHEN_TEXTRule() {
		return (tTHEN_TEXT != null) ? tTHEN_TEXT : (tTHEN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "THEN_TEXT"));
	} 

	//terminal AND_TEXT:
	//	("And " | "But ") STEP_WITH_ARGS;
	public TerminalRule getAND_TEXTRule() {
		return (tAND_TEXT != null) ? tAND_TEXT : (tAND_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND_TEXT"));
	} 

	//// this is a dummy token that will be generated by a custom TokenSource
	//terminal TEXT:
	//	"____dummy____"+;
	public TerminalRule getTEXTRule() {
		return (tTEXT != null) ? tTEXT : (tTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXT"));
	} 

	//terminal fragment STEP_WITH_ARGS:
	//	!("\r" | "\n")* "\r"? ("\n" SPACES RICH_TEXT? | EOF);
	public TerminalRule getSTEP_WITH_ARGSRule() {
		return (tSTEP_WITH_ARGS != null) ? tSTEP_WITH_ARGS : (tSTEP_WITH_ARGS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STEP_WITH_ARGS"));
	} 

	//terminal fragment MNL:
	//	!("\r" | "\n")* NL;
	public TerminalRule getMNLRule() {
		return (tMNL != null) ? tMNL : (tMNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MNL"));
	} 

	//terminal fragment COLON:
	//	SPACES ":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal fragment NL:
	//	"\r"? "\n"?;
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	//terminal fragment SPACES:
	//	(" " | "\t")*;
	public TerminalRule getSPACESRule() {
		return (tSPACES != null) ? tSPACES : (tSPACES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPACES"));
	} 

	//File returns XtendFile:
	//	("package" package=QualifiedName ";"?)? imports+=Import* xtendClasses+=Class*;
	public XtendGrammarAccess.FileElements getFileAccess() {
		return gaXtend.getFileAccess();
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName "." "*";
	public XtendGrammarAccess.QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return gaXtend.getQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Class returns XtendClass:
	//	annotations+=XAnnotation* "public"? abstract?="abstract"? "class" name=ValidID ("<" typeParameters+=JvmTypeParameter
	//	("," typeParameters+=JvmTypeParameter)* ">")? ("extends" extends=JvmParameterizedTypeReference)? ("implements"
	//	implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
	public XtendGrammarAccess.ClassElements getClassAccess() {
		return gaXtend.getClassAccess();
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//CreateExtensionInfo:
	//	"create" (name=ValidID ":")? createExpression=XExpression;
	public XtendGrammarAccess.CreateExtensionInfoElements getCreateExtensionInfoAccess() {
		return gaXtend.getCreateExtensionInfoAccess();
	}
	
	public ParserRule getCreateExtensionInfoRule() {
		return getCreateExtensionInfoAccess().getRule();
	}

	//ValidID:
	//	ID | "create";
	public XtendGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtend.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//Parameter returns XtendParameter:
	//	annotations+=XAnnotation* parameterType=JvmTypeReference varArg?="..."? name=ValidID;
	public XtendGrammarAccess.ParameterElements getParameterAccess() {
		return gaXtend.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//enum Visibility returns types::JvmVisibility:
	//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private";
	public XtendGrammarAccess.VisibilityElements getVisibilityAccess() {
		return gaXtend.getVisibilityAccess();
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//XStringLiteral returns xbase::XExpression:
	//	SimpleStringLiteral | RichString;
	public XtendGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXtend.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//SimpleStringLiteral returns xbase::XExpression:
	//	{xbase::XStringLiteral} value=STRING;
	public XtendGrammarAccess.SimpleStringLiteralElements getSimpleStringLiteralAccess() {
		return gaXtend.getSimpleStringLiteralAccess();
	}
	
	public ParserRule getSimpleStringLiteralRule() {
		return getSimpleStringLiteralAccess().getRule();
	}

	//RichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=RichStringPart?
	//	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* expressions+=RichStringLiteralEnd);
	public XtendGrammarAccess.RichStringElements getRichStringAccess() {
		return gaXtend.getRichStringAccess();
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT;
	public XtendGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXtend.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START;
	public XtendGrammarAccess.RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return gaXtend.getRichStringLiteralStartAccess();
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN);
	public XtendGrammarAccess.RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return gaXtend.getRichStringLiteralInbetweenAccess();
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END);
	public XtendGrammarAccess.RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return gaXtend.getRichStringLiteralEndAccess();
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//InternalRichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
	//	expressions+=RichStringLiteralInbetween)*);
	public XtendGrammarAccess.InternalRichStringElements getInternalRichStringAccess() {
		return gaXtend.getInternalRichStringAccess();
	}
	
	public ParserRule getInternalRichStringRule() {
		return getInternalRichStringAccess().getRule();
	}

	//RichStringPart returns xbase::XExpression:
	//	XExpressionInsideBlock | RichStringForLoop | RichStringIf;
	public XtendGrammarAccess.RichStringPartElements getRichStringPartAccess() {
		return gaXtend.getRichStringPartAccess();
	}
	
	public ParserRule getRichStringPartRule() {
		return getRichStringPartAccess().getRule();
	}

	//RichStringForLoop returns xbase::XExpression:
	//	{RichStringForLoop} "FOR" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("BEFORE"
	//	before=XExpression)? ("SEPARATOR" separator=XExpression)? ("AFTER" after=XExpression)?
	//	eachExpression=InternalRichString "ENDFOR";
	public XtendGrammarAccess.RichStringForLoopElements getRichStringForLoopAccess() {
		return gaXtend.getRichStringForLoopAccess();
	}
	
	public ParserRule getRichStringForLoopRule() {
		return getRichStringForLoopAccess().getRule();
	}

	//RichStringIf returns xbase::XExpression:
	//	{RichStringIf} "IF" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("ELSE"
	//	else=InternalRichString)? "ENDIF";
	public XtendGrammarAccess.RichStringIfElements getRichStringIfAccess() {
		return gaXtend.getRichStringIfAccess();
	}
	
	public ParserRule getRichStringIfRule() {
		return getRichStringIfAccess().getRule();
	}

	//RichStringElseIf:
	//	"ELSEIF" if=XExpression then=InternalRichString;
	public XtendGrammarAccess.RichStringElseIfElements getRichStringElseIfAccess() {
		return gaXtend.getRichStringElseIfAccess();
	}
	
	public ParserRule getRichStringElseIfRule() {
		return getRichStringElseIfAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"\'\'\'" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXTRule() {
		return gaXtend.getRICH_TEXTRule();
	} 

	//terminal RICH_TEXT_START:
	//	"\'\'\'" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaXtend.getRICH_TEXT_STARTRule();
	} 

	//terminal RICH_TEXT_END:
	//	"»" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaXtend.getRICH_TEXT_ENDRule();
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"»" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return gaXtend.getRICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_INBETWEEN:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'" "\'"?)? "«")?;
	public TerminalRule getCOMMENT_RICH_TEXT_INBETWEENRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_END:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF) | EOF);
	public TerminalRule getCOMMENT_RICH_TEXT_ENDRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_ENDRule();
	} 

	//terminal fragment IN_RICH_STRING:
	//	"\'\'" !("«" | "\'") | "\'" !("«" | "\'") | !("«" | "\'");
	public TerminalRule getIN_RICH_STRINGRule() {
		return gaXtend.getIN_RICH_STRINGRule();
	} 

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXtend.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXtend.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXtend.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXtend.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXtend.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXtend.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXtend.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXtend.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXtend.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXtend.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXtend.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXtend.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXtend.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXtend.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXtend.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXtend.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXtend.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXtend.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXtend.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXtend.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXtend.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXtend.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXtend.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXtend.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXtend.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXtend.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXtend.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXtend.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXtend.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXtend.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXtend.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXtend.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXtend.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXtend.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXtend.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXtend.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXtend.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXtend.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXtend.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXtend.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXtend.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXtend.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXtend.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXtend.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXtend.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXtend.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXtend.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXtend.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXtend.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXtend.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXtend.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXtend.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXtend.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtend.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXtend.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXtend.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXtend.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXtend.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtend.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtend.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtend.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtend.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtend.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtend.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtend.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtend.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtend.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtend.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXtend.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXtend.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtend.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtend.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtend.getANY_OTHERRule();
	} 
}
