/*******************************************************************************
 * Copyright (c) 2012 BMW Car IT and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
 
 /**
 * @author Birgit Engelmann - Initial contribution and API
 */

grammar org.jnario.feature.Feature with org.eclipse.xtend.core.Xtend

import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotations
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtend" as xtend
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.org/Jnario"
import "http://www.org/jnario/feature/Feature"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FeatureFile returns xtend::XtendFile: 
	{FeatureFile}
	('package' package=QualifiedName)?
	(imports += Import)*
	(xtendClasses += Feature)?
;

Import returns xtend::XtendImport: 
	'import' (
		(static?='static' extension?='extension'? importedType=[types::JvmType|QualifiedName] '.' '*') 
		| importedType=[types::JvmType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildCard) ';'?
;


Feature returns xtend::XtendClass:
	{Feature}
	(annotations+=XAnnotation)*
	name=FEATURE_TEXT
	description=TEXT?
	background=Background?
	scenarios+=Scenario*;
 
XAnnotation returns xannotations::XAnnotation:
	{xannotations::XAnnotation}
	'@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('
		(
			elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* 
		|	value=XAnnotationElementValue
		)?
	')')?
;

Background:
	{Background}
	name=BACKGROUND_TEXT
	members+=Member*
	(members+=(Given|GivenReference) members+=(And|AndReference)*)?;

Scenario :
	{Scenario}
	name=SCENARIO_TEXT
	members+=Member*
	(members+=(Given|GivenReference) members+=(And|AndReference)*)?
	(members+=(When|WhenReference) members+=(And|AndReference)*)?
	(members+=(Then|ThenReference) members+=(And|AndReference)*)?;

Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation* 
	(
		{xtend::XtendField.annotationInfo = current}	
			visibility=Visibility?   
		 	(extension?='extension' static?='static'?  (final?='val' | 'var')? type=JvmTypeReference name=ValidID?
			| static?='static'? (type=JvmTypeReference | (final?='val' | 'var') type=JvmTypeReference?) name=ValidID)
			('=' initialValue=XExpression)? ';'?
	) ;


GivenReference:
	{GivenReference}
	reference=[Given|GIVEN_TEXT] 
;

Given:
	{Given}
	name=GIVEN_TEXT expression=BlockExpression
;

WhenReference:
	{WhenReference}
	reference=[When|WHEN_TEXT] 
;

When:
	{When}
	name=WHEN_TEXT expression=BlockExpression
;

ThenReference:
	{ThenReference}
	reference=[Then|THEN_TEXT] 
;

Then:
	{Then}
	name=THEN_TEXT expression=BlockExpression;
	
AndReference:
	{AndReference}
	reference=[And|AND_TEXT] 
;
	
And:
	{And}
	name=AND_TEXT expression=BlockExpression
;

/*
 * artificial node to simplify folding
 */

BlockExpression returns xbase::XBlockExpression:
	(expressions+=XExpressionInsideBlock ';'?)+;

//ExampleTable:
//	name=EXAMPLE_TEXT
//	columns+=ExampleColumn+ EXAMPLE_ROW_END
//	(rows += ExampleRow)*;
//
//
//ExampleColumn: 
//	(PIPE | PIPE_SPACES) type=JvmTypeReference? name=ValidID ;
//
//ExampleRow:
//	((PIPE | PIPE_SPACES) cells+=XExpression)+ EXAMPLE_ROW_END;
	
XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	Assertion;



XRelationalExpression returns xbase::XExpression:
	XOtherOperatorExpression
	( 
	  =>({Should.leftOperand=current} 
	 		( feature=[types::JvmIdentifiableElement|Should])) rightOperand=XOtherOperatorExpression |
	 =>({ShouldThrow.expression=current} (('should' 'throw') | 'throws')) type=JvmTypeReference |
	 =>({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	 =>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;

Should:
	'should' 'not'? ID
;

XLiteral returns xbase::XExpression:
	XClosure |
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral 
//	| MockLiteral 
;

//MockLiteral:
//	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
//;

Assertion: 
	{Assertion}
	'assert' expression=XExpression;
 
terminal BACKGROUND_TEXT: "Background:" MNL;
terminal SCENARIO_TEXT: "Scenario:" MNL;
terminal FEATURE_TEXT: "Feature" COLON -> (BACKGROUND_TEXT|SCENARIO_TEXT);
terminal GIVEN_TEXT: 'Given ' STEP_WITH_ARGS;
terminal WHEN_TEXT: 'When ' STEP_WITH_ARGS;
terminal THEN_TEXT: 'Then ' STEP_WITH_ARGS;
terminal AND_TEXT: ('And ' | 'But ') STEP_WITH_ARGS;

// this is a dummy token that will be generated by a custom TokenSource
terminal TEXT: '____dummy____'+;

terminal fragment STEP_WITH_ARGS: !('\r'|'\n')* '\r'? (('\n' SPACES RICH_TEXT?) | EOF); 
terminal fragment MNL: !('\r'|'\n')* NL;
terminal fragment COLON: SPACES ':';
terminal fragment NL: '\r'? '\n'?;
terminal fragment SPACES: (' '|'\t')*;
