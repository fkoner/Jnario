grammar org.jnario.spec.Spec with org.eclipse.xtend.core.Xtend

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.org/jnario/spec/Spec" 
import "http://www.eclipse.org/xtend" as xtend
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.org/Jnario"

SpecFile:
{SpecFile}
('package' package=QualifiedName)? 
	imports+=Import*
	(xtendClasses+=ExampleGroup)*
;

ExampleGroup:  
	{ExampleGroup}
	annotations+=XAnnotation* 
	preamble='describe' targetType=JvmTypeReference? name=STRING? '{'
       (members+=Member*)
	'}'
;

Method:
	ID ('(' (TypeName (',' TypeName)*)? ')')?  
;

TypeName:
	ID ('<' TypeRef (',' TypeRef)* '>')? ('['']')?
;

TypeRef:
	('?')? ('extends' | 'super')?  TypeName
;


Member returns xtend::XtendMember:
	{xtend::XtendMember} annotations+=XAnnotation* 
	(
		{Example.annotationInfo = current}
			( pending?='pending'? ('fact' | 'facts') expr=XExpression expression=XBlockExpression?)
	|	{ExampleGroup.annotationInfo = current}
			(preamble='describe' targetType=JvmTypeReference? name=STRING? '{'
      		members+=Member*
      	'}')
    |	{Before.annotationInfo = current}
		('before' (static?='all'|'each')? =>name=STRING? expression=XExpression)
	|	{After.annotationInfo = current}
		('after' (static?='all'|'each')? =>name=STRING? expression=XExpression)
    |	{ExampleGroup.annotationInfo = current}
			(preamble=('context') targetOperation=[types::JvmOperation|Method]? name=STRING? '{'
      		members+=Member*
      	'}')
	|	{ExampleTable.annotationInfo = current} 
		('def' name=ID? '{'
			('|' (columns+=ExampleColumn)*
			(rows += ExampleRow)*)?
      	'}') 
	|	{xtend::XtendField.annotationInfo = current}	
			visibility=Visibility?   
		 	(extension?='extension' static?='static'? (final?='val' | 'var')? type=JvmTypeReference name=ValidID?
			| static?='static'? (type=JvmTypeReference | (final?='val' | 'var') type=JvmTypeReference?) name=ValidID)
			('=' initialValue=XExpression)? ';'?
	|	{xtend::XtendFunction.annotationInfo = current}
			('def' | override?='override') visibility=Visibility? static?='static'? (dispatch?='dispatch'?) 
			('<' typeParameters+=JvmTypeParameter (',' typeParameters+=JvmTypeParameter)* '>')?
			( =>(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| =>(returnType=JvmTypeReference name=ValidID '(')
			| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
			| name=ValidID '('
			)
			(parameters+=Parameter (',' parameters+=Parameter)*)? ')'
			('throws' exceptions+=JvmTypeReference (',' exceptions+=JvmTypeReference)*)?
			(expression=XBlockExpression | expression=RichString )?
	 );


XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression |
	Assertion;

XLiteral returns xbase::XExpression:
	XClosure |
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral 
//	| MockLiteral 
;

//MockLiteral:
//	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
//;

XRelationalExpression returns xbase::XExpression:
	XOtherOperatorExpression
	( 
	 =>({Should.leftOperand=current} 
	 		( feature=[types::JvmIdentifiableElement|Should])) =>rightOperand=XOtherOperatorExpression? |
	 =>({ShouldThrow.expression=current} (('should' 'throw') | 'throws')) type=JvmTypeReference |
	 =>({xbase::XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	 =>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;

Should:
	'should' 'not'? ID
;

Assertion returns xbase::XExpression: 
	{Assertion}
	'assert' expression=XExpression;
	
ExampleColumn: 
	type=JvmTypeReference? name=ValidID '|';

ExampleRow: 
	'|' {ExampleRow} (cells+=XExpression '|')*
;

terminal ML_COMMENT: '/*' -> (!('\\')'*/');
