/*
* generated by Xtext
*/

package org.jnario.spec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtend.core.services.XtendGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPackageQualifiedNameParserRuleCall_1_1_0 = (RuleCall)cPackageAssignment_1_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cXtendClassesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXtendClassesExampleGroupParserRuleCall_3_0 = (RuleCall)cXtendClassesAssignment_3.eContents().get(0);
		
		//SpecFile:
		//	{SpecFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=ExampleGroup*;
		public ParserRule getRule() { return rule; }

		//{SpecFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=ExampleGroup*
		public Group getGroup() { return cGroup; }

		//{SpecFile}
		public Action getSpecFileAction_0() { return cSpecFileAction_0; }

		//("package" package=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }

		//"package"
		public Keyword getPackageKeyword_1_0() { return cPackageKeyword_1_0; }

		//package=QualifiedName
		public Assignment getPackageAssignment_1_1() { return cPackageAssignment_1_1; }

		//QualifiedName
		public RuleCall getPackageQualifiedNameParserRuleCall_1_1_0() { return cPackageQualifiedNameParserRuleCall_1_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//xtendClasses+=ExampleGroup*
		public Assignment getXtendClassesAssignment_3() { return cXtendClassesAssignment_3; }

		//ExampleGroup
		public RuleCall getXtendClassesExampleGroupParserRuleCall_3_0() { return cXtendClassesExampleGroupParserRuleCall_3_0; }
	}

	public class ExampleGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExampleGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExampleGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cPreambleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPreambleDescribeKeyword_2_0 = (Keyword)cPreambleAssignment_2.eContents().get(0);
		private final Assignment cTargetTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTargetTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExampleGroup:
		//	{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=JvmTypeReference? name=STRING? "{"
		//	members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=JvmTypeReference? name=STRING? "{"
		//members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//{ExampleGroup}
		public Action getExampleGroupAction_0() { return cExampleGroupAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//preamble="describe"
		public Assignment getPreambleAssignment_2() { return cPreambleAssignment_2; }

		//"describe"
		public Keyword getPreambleDescribeKeyword_2_0() { return cPreambleDescribeKeyword_2_0; }

		//targetType=JvmTypeReference?
		public Assignment getTargetTypeAssignment_3() { return cTargetTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTargetTypeJvmTypeReferenceParserRuleCall_3_0() { return cTargetTypeJvmTypeReferenceParserRuleCall_3_0; }

		//name=STRING?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Method:
		//	ID ("(" (TypeName ("," TypeName)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//ID ("(" (TypeName ("," TypeName)*)? ")")?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("(" (TypeName ("," TypeName)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(TypeName ("," TypeName)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_1_1_0() { return cTypeNameParserRuleCall_1_1_0; }

		//("," TypeName)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_1_1_1_1() { return cTypeNameParserRuleCall_1_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cTypeRefParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//TypeName:
		//	ID ("<" TypeRef ("," TypeRef)* ">")? ("[" "]")?;
		public ParserRule getRule() { return rule; }

		//ID ("<" TypeRef ("," TypeRef)* ">")? ("[" "]")?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("<" TypeRef ("," TypeRef)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_1_1() { return cTypeRefParserRuleCall_1_1; }

		//("," TypeRef)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//TypeRef
		public RuleCall getTypeRefParserRuleCall_1_2_1() { return cTypeRefParserRuleCall_1_2_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("[" "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSuperKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TypeRef:
		//	"?"? ("extends" | "super")? TypeName;
		public ParserRule getRule() { return rule; }

		//"?"? ("extends" | "super")? TypeName
		public Group getGroup() { return cGroup; }

		//"?"?
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//("extends" | "super")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//"super"
		public Keyword getSuperKeyword_1_1() { return cSuperKeyword_1_1; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXtendMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Action cExampleAnnotationInfoAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cPendingAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final Keyword cPendingPendingKeyword_2_0_1_0_0 = (Keyword)cPendingAssignment_2_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1_1 = (Alternatives)cGroup_2_0_1.eContents().get(1);
		private final Keyword cFactKeyword_2_0_1_1_0 = (Keyword)cAlternatives_2_0_1_1.eContents().get(0);
		private final Keyword cFactsKeyword_2_0_1_1_1 = (Keyword)cAlternatives_2_0_1_1.eContents().get(1);
		private final Assignment cExprAssignment_2_0_1_2 = (Assignment)cGroup_2_0_1.eContents().get(2);
		private final RuleCall cExprXExpressionParserRuleCall_2_0_1_2_0 = (RuleCall)cExprAssignment_2_0_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_1_3 = (Assignment)cGroup_2_0_1.eContents().get(3);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_0_1_3_0 = (RuleCall)cExpressionAssignment_2_0_1_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cExampleGroupAnnotationInfoAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cPreambleAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final Keyword cPreambleDescribeKeyword_2_1_1_0_0 = (Keyword)cPreambleAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cTargetTypeAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTargetTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0 = (RuleCall)cTargetTypeAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_1_1_2_0 = (RuleCall)cNameAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Assignment cMembersAssignment_2_1_1_4 = (Assignment)cGroup_2_1_1.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_2_1_1_4_0 = (RuleCall)cMembersAssignment_2_1_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1_5 = (Keyword)cGroup_2_1_1.eContents().get(5);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Action cBeforeAnnotationInfoAction_2_2_0 = (Action)cGroup_2_2.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cBeforeKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1_1 = (Alternatives)cGroup_2_2_1.eContents().get(1);
		private final Assignment cStaticAssignment_2_2_1_1_0 = (Assignment)cAlternatives_2_2_1_1.eContents().get(0);
		private final Keyword cStaticAllKeyword_2_2_1_1_0_0 = (Keyword)cStaticAssignment_2_2_1_1_0.eContents().get(0);
		private final Keyword cEachKeyword_2_2_1_1_1 = (Keyword)cAlternatives_2_2_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_2_1_2 = (Assignment)cGroup_2_2_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_2_1_2_0 = (RuleCall)cNameAssignment_2_2_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2_1_3 = (Assignment)cGroup_2_2_1.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_2_1_3_0 = (RuleCall)cExpressionAssignment_2_2_1_3.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Action cAfterAnnotationInfoAction_2_3_0 = (Action)cGroup_2_3.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cAfterKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Alternatives cAlternatives_2_3_1_1 = (Alternatives)cGroup_2_3_1.eContents().get(1);
		private final Assignment cStaticAssignment_2_3_1_1_0 = (Assignment)cAlternatives_2_3_1_1.eContents().get(0);
		private final Keyword cStaticAllKeyword_2_3_1_1_0_0 = (Keyword)cStaticAssignment_2_3_1_1_0.eContents().get(0);
		private final Keyword cEachKeyword_2_3_1_1_1 = (Keyword)cAlternatives_2_3_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2_3_1_2 = (Assignment)cGroup_2_3_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_3_1_2_0 = (RuleCall)cNameAssignment_2_3_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_3_1_3 = (Assignment)cGroup_2_3_1.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_3_1_3_0 = (RuleCall)cExpressionAssignment_2_3_1_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cAlternatives_2.eContents().get(4);
		private final Action cExampleGroupAnnotationInfoAction_2_4_0 = (Action)cGroup_2_4.eContents().get(0);
		private final Group cGroup_2_4_1 = (Group)cGroup_2_4.eContents().get(1);
		private final Assignment cPreambleAssignment_2_4_1_0 = (Assignment)cGroup_2_4_1.eContents().get(0);
		private final Keyword cPreambleContextKeyword_2_4_1_0_0 = (Keyword)cPreambleAssignment_2_4_1_0.eContents().get(0);
		private final Assignment cTargetOperationAssignment_2_4_1_1 = (Assignment)cGroup_2_4_1.eContents().get(1);
		private final CrossReference cTargetOperationJvmOperationCrossReference_2_4_1_1_0 = (CrossReference)cTargetOperationAssignment_2_4_1_1.eContents().get(0);
		private final RuleCall cTargetOperationJvmOperationMethodParserRuleCall_2_4_1_1_0_1 = (RuleCall)cTargetOperationJvmOperationCrossReference_2_4_1_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2_4_1_2 = (Assignment)cGroup_2_4_1.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_4_1_2_0 = (RuleCall)cNameAssignment_2_4_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_4_1_3 = (Keyword)cGroup_2_4_1.eContents().get(3);
		private final Assignment cMembersAssignment_2_4_1_4 = (Assignment)cGroup_2_4_1.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_2_4_1_4_0 = (RuleCall)cMembersAssignment_2_4_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4_1_5 = (Keyword)cGroup_2_4_1.eContents().get(5);
		private final Group cGroup_2_5 = (Group)cAlternatives_2.eContents().get(5);
		private final Action cExampleTableAnnotationInfoAction_2_5_0 = (Action)cGroup_2_5.eContents().get(0);
		private final Group cGroup_2_5_1 = (Group)cGroup_2_5.eContents().get(1);
		private final Keyword cDefKeyword_2_5_1_0 = (Keyword)cGroup_2_5_1.eContents().get(0);
		private final Assignment cNameAssignment_2_5_1_1 = (Assignment)cGroup_2_5_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_5_1_1_0 = (RuleCall)cNameAssignment_2_5_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_5_1_2 = (Keyword)cGroup_2_5_1.eContents().get(2);
		private final Group cGroup_2_5_1_3 = (Group)cGroup_2_5_1.eContents().get(3);
		private final Keyword cVerticalLineKeyword_2_5_1_3_0 = (Keyword)cGroup_2_5_1_3.eContents().get(0);
		private final Assignment cColumnsAssignment_2_5_1_3_1 = (Assignment)cGroup_2_5_1_3.eContents().get(1);
		private final RuleCall cColumnsExampleColumnParserRuleCall_2_5_1_3_1_0 = (RuleCall)cColumnsAssignment_2_5_1_3_1.eContents().get(0);
		private final Assignment cRowsAssignment_2_5_1_3_2 = (Assignment)cGroup_2_5_1_3.eContents().get(2);
		private final RuleCall cRowsExampleRowParserRuleCall_2_5_1_3_2_0 = (RuleCall)cRowsAssignment_2_5_1_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_5_1_4 = (Keyword)cGroup_2_5_1.eContents().get(4);
		private final Group cGroup_2_6 = (Group)cAlternatives_2.eContents().get(6);
		private final Action cXtendFieldAnnotationInfoAction_2_6_0 = (Action)cGroup_2_6.eContents().get(0);
		private final Assignment cVisibilityAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_6_1_0 = (RuleCall)cVisibilityAssignment_2_6_1.eContents().get(0);
		private final Alternatives cAlternatives_2_6_2 = (Alternatives)cGroup_2_6.eContents().get(2);
		private final Group cGroup_2_6_2_0 = (Group)cAlternatives_2_6_2.eContents().get(0);
		private final Assignment cExtensionAssignment_2_6_2_0_0 = (Assignment)cGroup_2_6_2_0.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_2_6_2_0_0_0 = (Keyword)cExtensionAssignment_2_6_2_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_2_6_2_0_1 = (Assignment)cGroup_2_6_2_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_2_6_2_0_1_0 = (Keyword)cStaticAssignment_2_6_2_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_6_2_0_2 = (Alternatives)cGroup_2_6_2_0.eContents().get(2);
		private final Assignment cFinalAssignment_2_6_2_0_2_0 = (Assignment)cAlternatives_2_6_2_0_2.eContents().get(0);
		private final Keyword cFinalValKeyword_2_6_2_0_2_0_0 = (Keyword)cFinalAssignment_2_6_2_0_2_0.eContents().get(0);
		private final Keyword cVarKeyword_2_6_2_0_2_1 = (Keyword)cAlternatives_2_6_2_0_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_6_2_0_3 = (Assignment)cGroup_2_6_2_0.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_6_2_0_3_0 = (RuleCall)cTypeAssignment_2_6_2_0_3.eContents().get(0);
		private final Assignment cNameAssignment_2_6_2_0_4 = (Assignment)cGroup_2_6_2_0.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_2_6_2_0_4_0 = (RuleCall)cNameAssignment_2_6_2_0_4.eContents().get(0);
		private final Group cGroup_2_6_2_1 = (Group)cAlternatives_2_6_2.eContents().get(1);
		private final Assignment cStaticAssignment_2_6_2_1_0 = (Assignment)cGroup_2_6_2_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_2_6_2_1_0_0 = (Keyword)cStaticAssignment_2_6_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_6_2_1_1 = (Alternatives)cGroup_2_6_2_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_6_2_1_1_0 = (Assignment)cAlternatives_2_6_2_1_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_0_0 = (RuleCall)cTypeAssignment_2_6_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_6_2_1_1_1 = (Group)cAlternatives_2_6_2_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2_6_2_1_1_1_0 = (Alternatives)cGroup_2_6_2_1_1_1.eContents().get(0);
		private final Assignment cFinalAssignment_2_6_2_1_1_1_0_0 = (Assignment)cAlternatives_2_6_2_1_1_1_0.eContents().get(0);
		private final Keyword cFinalValKeyword_2_6_2_1_1_1_0_0_0 = (Keyword)cFinalAssignment_2_6_2_1_1_1_0_0.eContents().get(0);
		private final Keyword cVarKeyword_2_6_2_1_1_1_0_1 = (Keyword)cAlternatives_2_6_2_1_1_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_6_2_1_1_1_1 = (Assignment)cGroup_2_6_2_1_1_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_1_1_0 = (RuleCall)cTypeAssignment_2_6_2_1_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2_6_2_1_2 = (Assignment)cGroup_2_6_2_1.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_6_2_1_2_0 = (RuleCall)cNameAssignment_2_6_2_1_2.eContents().get(0);
		private final Group cGroup_2_6_3 = (Group)cGroup_2_6.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2_6_3_0 = (Keyword)cGroup_2_6_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_2_6_3_1 = (Assignment)cGroup_2_6_3.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_2_6_3_1_0 = (RuleCall)cInitialValueAssignment_2_6_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_6_4 = (Keyword)cGroup_2_6.eContents().get(4);
		private final Group cGroup_2_7 = (Group)cAlternatives_2.eContents().get(7);
		private final Action cXtendFunctionAnnotationInfoAction_2_7_0 = (Action)cGroup_2_7.eContents().get(0);
		private final Alternatives cAlternatives_2_7_1 = (Alternatives)cGroup_2_7.eContents().get(1);
		private final Keyword cDefKeyword_2_7_1_0 = (Keyword)cAlternatives_2_7_1.eContents().get(0);
		private final Assignment cOverrideAssignment_2_7_1_1 = (Assignment)cAlternatives_2_7_1.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_2_7_1_1_0 = (Keyword)cOverrideAssignment_2_7_1_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2_7_2 = (Assignment)cGroup_2_7.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_2_7_2_0 = (RuleCall)cVisibilityAssignment_2_7_2.eContents().get(0);
		private final Assignment cStaticAssignment_2_7_3 = (Assignment)cGroup_2_7.eContents().get(3);
		private final Keyword cStaticStaticKeyword_2_7_3_0 = (Keyword)cStaticAssignment_2_7_3.eContents().get(0);
		private final Assignment cDispatchAssignment_2_7_4 = (Assignment)cGroup_2_7.eContents().get(4);
		private final Keyword cDispatchDispatchKeyword_2_7_4_0 = (Keyword)cDispatchAssignment_2_7_4.eContents().get(0);
		private final Group cGroup_2_7_5 = (Group)cGroup_2_7.eContents().get(5);
		private final Keyword cLessThanSignKeyword_2_7_5_0 = (Keyword)cGroup_2_7_5.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_7_5_1 = (Assignment)cGroup_2_7_5.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_7_5_1_0 = (RuleCall)cTypeParametersAssignment_2_7_5_1.eContents().get(0);
		private final Group cGroup_2_7_5_2 = (Group)cGroup_2_7_5.eContents().get(2);
		private final Keyword cCommaKeyword_2_7_5_2_0 = (Keyword)cGroup_2_7_5_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_7_5_2_1 = (Assignment)cGroup_2_7_5_2.eContents().get(1);
		private final RuleCall cTypeParametersJvmTypeParameterParserRuleCall_2_7_5_2_1_0 = (RuleCall)cTypeParametersAssignment_2_7_5_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_7_5_3 = (Keyword)cGroup_2_7_5.eContents().get(3);
		private final Alternatives cAlternatives_2_7_6 = (Alternatives)cGroup_2_7.eContents().get(6);
		private final Group cGroup_2_7_6_0 = (Group)cAlternatives_2_7_6.eContents().get(0);
		private final Group cGroup_2_7_6_0_0 = (Group)cGroup_2_7_6_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_7_6_0_0_0 = (Assignment)cGroup_2_7_6_0_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_0_0_0_0 = (RuleCall)cReturnTypeAssignment_2_7_6_0_0_0.eContents().get(0);
		private final Assignment cCreateExtensionInfoAssignment_2_7_6_0_0_1 = (Assignment)cGroup_2_7_6_0_0.eContents().get(1);
		private final RuleCall cCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_0_0_1_0 = (RuleCall)cCreateExtensionInfoAssignment_2_7_6_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_7_6_0_0_2 = (Assignment)cGroup_2_7_6_0_0.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_7_6_0_0_2_0 = (RuleCall)cNameAssignment_2_7_6_0_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_7_6_0_0_3 = (Keyword)cGroup_2_7_6_0_0.eContents().get(3);
		private final Group cGroup_2_7_6_1 = (Group)cAlternatives_2_7_6.eContents().get(1);
		private final Group cGroup_2_7_6_1_0 = (Group)cGroup_2_7_6_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_2_7_6_1_0_0 = (Assignment)cGroup_2_7_6_1_0.eContents().get(0);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_1_0_0_0 = (RuleCall)cReturnTypeAssignment_2_7_6_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_7_6_1_0_1 = (Assignment)cGroup_2_7_6_1_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_7_6_1_0_1_0 = (RuleCall)cNameAssignment_2_7_6_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_7_6_1_0_2 = (Keyword)cGroup_2_7_6_1_0.eContents().get(2);
		private final Group cGroup_2_7_6_2 = (Group)cAlternatives_2_7_6.eContents().get(2);
		private final Group cGroup_2_7_6_2_0 = (Group)cGroup_2_7_6_2.eContents().get(0);
		private final Assignment cCreateExtensionInfoAssignment_2_7_6_2_0_0 = (Assignment)cGroup_2_7_6_2_0.eContents().get(0);
		private final RuleCall cCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_2_0_0_0 = (RuleCall)cCreateExtensionInfoAssignment_2_7_6_2_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_7_6_2_0_1 = (Assignment)cGroup_2_7_6_2_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_7_6_2_0_1_0 = (RuleCall)cNameAssignment_2_7_6_2_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_7_6_2_0_2 = (Keyword)cGroup_2_7_6_2_0.eContents().get(2);
		private final Group cGroup_2_7_6_3 = (Group)cAlternatives_2_7_6.eContents().get(3);
		private final Assignment cNameAssignment_2_7_6_3_0 = (Assignment)cGroup_2_7_6_3.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_7_6_3_0_0 = (RuleCall)cNameAssignment_2_7_6_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_7_6_3_1 = (Keyword)cGroup_2_7_6_3.eContents().get(1);
		private final Group cGroup_2_7_7 = (Group)cGroup_2_7.eContents().get(7);
		private final Assignment cParametersAssignment_2_7_7_0 = (Assignment)cGroup_2_7_7.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_7_7_0_0 = (RuleCall)cParametersAssignment_2_7_7_0.eContents().get(0);
		private final Group cGroup_2_7_7_1 = (Group)cGroup_2_7_7.eContents().get(1);
		private final Keyword cCommaKeyword_2_7_7_1_0 = (Keyword)cGroup_2_7_7_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_7_7_1_1 = (Assignment)cGroup_2_7_7_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_7_7_1_1_0 = (RuleCall)cParametersAssignment_2_7_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_7_8 = (Keyword)cGroup_2_7.eContents().get(8);
		private final Group cGroup_2_7_9 = (Group)cGroup_2_7.eContents().get(9);
		private final Keyword cThrowsKeyword_2_7_9_0 = (Keyword)cGroup_2_7_9.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_7_9_1 = (Assignment)cGroup_2_7_9.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_2_7_9_1_0 = (RuleCall)cExceptionsAssignment_2_7_9_1.eContents().get(0);
		private final Group cGroup_2_7_9_2 = (Group)cGroup_2_7_9.eContents().get(2);
		private final Keyword cCommaKeyword_2_7_9_2_0 = (Keyword)cGroup_2_7_9_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_7_9_2_1 = (Assignment)cGroup_2_7_9_2.eContents().get(1);
		private final RuleCall cExceptionsJvmTypeReferenceParserRuleCall_2_7_9_2_1_0 = (RuleCall)cExceptionsAssignment_2_7_9_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_7_10 = (Alternatives)cGroup_2_7.eContents().get(10);
		private final Assignment cExpressionAssignment_2_7_10_0 = (Assignment)cAlternatives_2_7_10.eContents().get(0);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_7_10_0_0 = (RuleCall)cExpressionAssignment_2_7_10_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_7_10_1 = (Assignment)cAlternatives_2_7_10.eContents().get(1);
		private final RuleCall cExpressionRichStringParserRuleCall_2_7_10_1_0 = (RuleCall)cExpressionAssignment_2_7_10_1.eContents().get(0);
		
		//Member returns xtend::XtendMember:
		//	{xtend::XtendMember} annotations+=XAnnotation* ({Example.annotationInfo=current} (pending?="pending"? ("fact" |
		//	"facts") expr=XExpression expression=XBlockExpression?) | {ExampleGroup.annotationInfo=current} (preamble="describe"
		//	targetType=JvmTypeReference? name=STRING? "{" members+=Member* "}") | {Before.annotationInfo=current} ("before"
		//	(static?="all" | "each")? => name=STRING? expression=XExpression) | {After.annotationInfo=current} ("after"
		//	(static?="all" | "each")? => name=STRING? expression=XExpression) | {ExampleGroup.annotationInfo=current}
		//	(preamble="context" targetOperation=[types::JvmOperation|Method]? name=STRING? "{" members+=Member* "}") |
		//	{ExampleTable.annotationInfo=current} ("def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}") |
		//	{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
		//	(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
		//	| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"? |
		//	{xtend::XtendFunction.annotationInfo=current} ("def" | override?="override") visibility=Visibility? static?="static"?
		//	dispatch?="dispatch"? ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
		//	(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
		//	(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
		//	name=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=JvmTypeReference
		//	("," exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString)?);
		public ParserRule getRule() { return rule; }

		//{xtend::XtendMember} annotations+=XAnnotation* ({Example.annotationInfo=current} (pending?="pending"? ("fact" | "facts")
		//expr=XExpression expression=XBlockExpression?) | {ExampleGroup.annotationInfo=current} (preamble="describe"
		//targetType=JvmTypeReference? name=STRING? "{" members+=Member* "}") | {Before.annotationInfo=current} ("before"
		//(static?="all" | "each")? => name=STRING? expression=XExpression) | {After.annotationInfo=current} ("after"
		//(static?="all" | "each")? => name=STRING? expression=XExpression) | {ExampleGroup.annotationInfo=current}
		//(preamble="context" targetOperation=[types::JvmOperation|Method]? name=STRING? "{" members+=Member* "}") |
		//{ExampleTable.annotationInfo=current} ("def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}") |
		//{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
		//(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
		//| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"? |
		//{xtend::XtendFunction.annotationInfo=current} ("def" | override?="override") visibility=Visibility? static?="static"?
		//dispatch?="dispatch"? ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
		//(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
		//(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
		//name=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=JvmTypeReference (","
		//exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString)?)
		public Group getGroup() { return cGroup; }

		//{xtend::XtendMember}
		public Action getXtendMemberAction_0() { return cXtendMemberAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//{Example.annotationInfo=current} (pending?="pending"? ("fact" | "facts") expr=XExpression expression=XBlockExpression?)
		//| {ExampleGroup.annotationInfo=current} (preamble="describe" targetType=JvmTypeReference? name=STRING? "{"
		//members+=Member* "}") | {Before.annotationInfo=current} ("before" (static?="all" | "each")? => name=STRING?
		//expression=XExpression) | {After.annotationInfo=current} ("after" (static?="all" | "each")? => name=STRING?
		//expression=XExpression) | {ExampleGroup.annotationInfo=current} (preamble="context"
		//targetOperation=[types::JvmOperation|Method]? name=STRING? "{" members+=Member* "}") |
		//{ExampleTable.annotationInfo=current} ("def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}") |
		//{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
		//(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
		//| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"? |
		//{xtend::XtendFunction.annotationInfo=current} ("def" | override?="override") visibility=Visibility? static?="static"?
		//dispatch?="dispatch"? ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
		//(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
		//(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
		//name=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=JvmTypeReference (","
		//exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//{Example.annotationInfo=current} (pending?="pending"? ("fact" | "facts") expr=XExpression expression=XBlockExpression?)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{Example.annotationInfo=current}
		public Action getExampleAnnotationInfoAction_2_0_0() { return cExampleAnnotationInfoAction_2_0_0; }

		//pending?="pending"? ("fact" | "facts") expr=XExpression expression=XBlockExpression?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//pending?="pending"?
		public Assignment getPendingAssignment_2_0_1_0() { return cPendingAssignment_2_0_1_0; }

		//"pending"
		public Keyword getPendingPendingKeyword_2_0_1_0_0() { return cPendingPendingKeyword_2_0_1_0_0; }

		//"fact" | "facts"
		public Alternatives getAlternatives_2_0_1_1() { return cAlternatives_2_0_1_1; }

		//"fact"
		public Keyword getFactKeyword_2_0_1_1_0() { return cFactKeyword_2_0_1_1_0; }

		//"facts"
		public Keyword getFactsKeyword_2_0_1_1_1() { return cFactsKeyword_2_0_1_1_1; }

		//expr=XExpression
		public Assignment getExprAssignment_2_0_1_2() { return cExprAssignment_2_0_1_2; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_2_0_1_2_0() { return cExprXExpressionParserRuleCall_2_0_1_2_0; }

		//expression=XBlockExpression?
		public Assignment getExpressionAssignment_2_0_1_3() { return cExpressionAssignment_2_0_1_3; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_0_1_3_0() { return cExpressionXBlockExpressionParserRuleCall_2_0_1_3_0; }

		//{ExampleGroup.annotationInfo=current} (preamble="describe" targetType=JvmTypeReference? name=STRING? "{"
		//members+=Member* "}")
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{ExampleGroup.annotationInfo=current}
		public Action getExampleGroupAnnotationInfoAction_2_1_0() { return cExampleGroupAnnotationInfoAction_2_1_0; }

		//preamble="describe" targetType=JvmTypeReference? name=STRING? "{" members+=Member* "}"
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//preamble="describe"
		public Assignment getPreambleAssignment_2_1_1_0() { return cPreambleAssignment_2_1_1_0; }

		//"describe"
		public Keyword getPreambleDescribeKeyword_2_1_1_0_0() { return cPreambleDescribeKeyword_2_1_1_0_0; }

		//targetType=JvmTypeReference?
		public Assignment getTargetTypeAssignment_2_1_1_1() { return cTargetTypeAssignment_2_1_1_1; }

		//JvmTypeReference
		public RuleCall getTargetTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0() { return cTargetTypeJvmTypeReferenceParserRuleCall_2_1_1_1_0; }

		//name=STRING?
		public Assignment getNameAssignment_2_1_1_2() { return cNameAssignment_2_1_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_1_1_2_0() { return cNameSTRINGTerminalRuleCall_2_1_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_1_3() { return cLeftCurlyBracketKeyword_2_1_1_3; }

		//members+=Member*
		public Assignment getMembersAssignment_2_1_1_4() { return cMembersAssignment_2_1_1_4; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_1_1_4_0() { return cMembersMemberParserRuleCall_2_1_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_1_5() { return cRightCurlyBracketKeyword_2_1_1_5; }

		//{Before.annotationInfo=current} ("before" (static?="all" | "each")? => name=STRING? expression=XExpression)
		public Group getGroup_2_2() { return cGroup_2_2; }

		//{Before.annotationInfo=current}
		public Action getBeforeAnnotationInfoAction_2_2_0() { return cBeforeAnnotationInfoAction_2_2_0; }

		//"before" (static?="all" | "each")? => name=STRING? expression=XExpression
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//"before"
		public Keyword getBeforeKeyword_2_2_1_0() { return cBeforeKeyword_2_2_1_0; }

		//(static?="all" | "each")?
		public Alternatives getAlternatives_2_2_1_1() { return cAlternatives_2_2_1_1; }

		//static?="all"
		public Assignment getStaticAssignment_2_2_1_1_0() { return cStaticAssignment_2_2_1_1_0; }

		//"all"
		public Keyword getStaticAllKeyword_2_2_1_1_0_0() { return cStaticAllKeyword_2_2_1_1_0_0; }

		//"each"
		public Keyword getEachKeyword_2_2_1_1_1() { return cEachKeyword_2_2_1_1_1; }

		//=> name=STRING?
		public Assignment getNameAssignment_2_2_1_2() { return cNameAssignment_2_2_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_2_1_2_0() { return cNameSTRINGTerminalRuleCall_2_2_1_2_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2_2_1_3() { return cExpressionAssignment_2_2_1_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_2_1_3_0() { return cExpressionXExpressionParserRuleCall_2_2_1_3_0; }

		//{After.annotationInfo=current} ("after" (static?="all" | "each")? => name=STRING? expression=XExpression)
		public Group getGroup_2_3() { return cGroup_2_3; }

		//{After.annotationInfo=current}
		public Action getAfterAnnotationInfoAction_2_3_0() { return cAfterAnnotationInfoAction_2_3_0; }

		//"after" (static?="all" | "each")? => name=STRING? expression=XExpression
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"after"
		public Keyword getAfterKeyword_2_3_1_0() { return cAfterKeyword_2_3_1_0; }

		//(static?="all" | "each")?
		public Alternatives getAlternatives_2_3_1_1() { return cAlternatives_2_3_1_1; }

		//static?="all"
		public Assignment getStaticAssignment_2_3_1_1_0() { return cStaticAssignment_2_3_1_1_0; }

		//"all"
		public Keyword getStaticAllKeyword_2_3_1_1_0_0() { return cStaticAllKeyword_2_3_1_1_0_0; }

		//"each"
		public Keyword getEachKeyword_2_3_1_1_1() { return cEachKeyword_2_3_1_1_1; }

		//=> name=STRING?
		public Assignment getNameAssignment_2_3_1_2() { return cNameAssignment_2_3_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_3_1_2_0() { return cNameSTRINGTerminalRuleCall_2_3_1_2_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2_3_1_3() { return cExpressionAssignment_2_3_1_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_3_1_3_0() { return cExpressionXExpressionParserRuleCall_2_3_1_3_0; }

		//{ExampleGroup.annotationInfo=current} (preamble="context" targetOperation=[types::JvmOperation|Method]? name=STRING? "{"
		//members+=Member* "}")
		public Group getGroup_2_4() { return cGroup_2_4; }

		//{ExampleGroup.annotationInfo=current}
		public Action getExampleGroupAnnotationInfoAction_2_4_0() { return cExampleGroupAnnotationInfoAction_2_4_0; }

		//preamble="context" targetOperation=[types::JvmOperation|Method]? name=STRING? "{" members+=Member* "}"
		public Group getGroup_2_4_1() { return cGroup_2_4_1; }

		//preamble="context"
		public Assignment getPreambleAssignment_2_4_1_0() { return cPreambleAssignment_2_4_1_0; }

		//"context"
		public Keyword getPreambleContextKeyword_2_4_1_0_0() { return cPreambleContextKeyword_2_4_1_0_0; }

		//targetOperation=[types::JvmOperation|Method]?
		public Assignment getTargetOperationAssignment_2_4_1_1() { return cTargetOperationAssignment_2_4_1_1; }

		//[types::JvmOperation|Method]
		public CrossReference getTargetOperationJvmOperationCrossReference_2_4_1_1_0() { return cTargetOperationJvmOperationCrossReference_2_4_1_1_0; }

		//Method
		public RuleCall getTargetOperationJvmOperationMethodParserRuleCall_2_4_1_1_0_1() { return cTargetOperationJvmOperationMethodParserRuleCall_2_4_1_1_0_1; }

		//name=STRING?
		public Assignment getNameAssignment_2_4_1_2() { return cNameAssignment_2_4_1_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_4_1_2_0() { return cNameSTRINGTerminalRuleCall_2_4_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_4_1_3() { return cLeftCurlyBracketKeyword_2_4_1_3; }

		//members+=Member*
		public Assignment getMembersAssignment_2_4_1_4() { return cMembersAssignment_2_4_1_4; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_4_1_4_0() { return cMembersMemberParserRuleCall_2_4_1_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4_1_5() { return cRightCurlyBracketKeyword_2_4_1_5; }

		//{ExampleTable.annotationInfo=current} ("def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}")
		public Group getGroup_2_5() { return cGroup_2_5; }

		//{ExampleTable.annotationInfo=current}
		public Action getExampleTableAnnotationInfoAction_2_5_0() { return cExampleTableAnnotationInfoAction_2_5_0; }

		//"def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}"
		public Group getGroup_2_5_1() { return cGroup_2_5_1; }

		//"def"
		public Keyword getDefKeyword_2_5_1_0() { return cDefKeyword_2_5_1_0; }

		//name=ID?
		public Assignment getNameAssignment_2_5_1_1() { return cNameAssignment_2_5_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_5_1_1_0() { return cNameIDTerminalRuleCall_2_5_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_5_1_2() { return cLeftCurlyBracketKeyword_2_5_1_2; }

		//("|" columns+=ExampleColumn* rows+=ExampleRow*)?
		public Group getGroup_2_5_1_3() { return cGroup_2_5_1_3; }

		//"|"
		public Keyword getVerticalLineKeyword_2_5_1_3_0() { return cVerticalLineKeyword_2_5_1_3_0; }

		//columns+=ExampleColumn*
		public Assignment getColumnsAssignment_2_5_1_3_1() { return cColumnsAssignment_2_5_1_3_1; }

		//ExampleColumn
		public RuleCall getColumnsExampleColumnParserRuleCall_2_5_1_3_1_0() { return cColumnsExampleColumnParserRuleCall_2_5_1_3_1_0; }

		//rows+=ExampleRow*
		public Assignment getRowsAssignment_2_5_1_3_2() { return cRowsAssignment_2_5_1_3_2; }

		//ExampleRow
		public RuleCall getRowsExampleRowParserRuleCall_2_5_1_3_2_0() { return cRowsExampleRowParserRuleCall_2_5_1_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_5_1_4() { return cRightCurlyBracketKeyword_2_5_1_4; }

		//{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
		//(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
		//| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"?
		public Group getGroup_2_6() { return cGroup_2_6; }

		//{xtend::XtendField.annotationInfo=current}
		public Action getXtendFieldAnnotationInfoAction_2_6_0() { return cXtendFieldAnnotationInfoAction_2_6_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2_6_1() { return cVisibilityAssignment_2_6_1; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_6_1_0() { return cVisibilityVisibilityEnumRuleCall_2_6_1_0; }

		//extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"?
		//(type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID
		public Alternatives getAlternatives_2_6_2() { return cAlternatives_2_6_2; }

		//extension?="extension" static?="static"? (final?="val" | "var")? type=JvmTypeReference name=ValidID?
		public Group getGroup_2_6_2_0() { return cGroup_2_6_2_0; }

		//extension?="extension"
		public Assignment getExtensionAssignment_2_6_2_0_0() { return cExtensionAssignment_2_6_2_0_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_2_6_2_0_0_0() { return cExtensionExtensionKeyword_2_6_2_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_2_6_2_0_1() { return cStaticAssignment_2_6_2_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_2_6_2_0_1_0() { return cStaticStaticKeyword_2_6_2_0_1_0; }

		//(final?="val" | "var")?
		public Alternatives getAlternatives_2_6_2_0_2() { return cAlternatives_2_6_2_0_2; }

		//final?="val"
		public Assignment getFinalAssignment_2_6_2_0_2_0() { return cFinalAssignment_2_6_2_0_2_0; }

		//"val"
		public Keyword getFinalValKeyword_2_6_2_0_2_0_0() { return cFinalValKeyword_2_6_2_0_2_0_0; }

		//"var"
		public Keyword getVarKeyword_2_6_2_0_2_1() { return cVarKeyword_2_6_2_0_2_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_6_2_0_3() { return cTypeAssignment_2_6_2_0_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_6_2_0_3_0() { return cTypeJvmTypeReferenceParserRuleCall_2_6_2_0_3_0; }

		//name=ValidID?
		public Assignment getNameAssignment_2_6_2_0_4() { return cNameAssignment_2_6_2_0_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_6_2_0_4_0() { return cNameValidIDParserRuleCall_2_6_2_0_4_0; }

		//static?="static"? (type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?) name=ValidID
		public Group getGroup_2_6_2_1() { return cGroup_2_6_2_1; }

		//static?="static"?
		public Assignment getStaticAssignment_2_6_2_1_0() { return cStaticAssignment_2_6_2_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_2_6_2_1_0_0() { return cStaticStaticKeyword_2_6_2_1_0_0; }

		//type=JvmTypeReference | (final?="val" | "var") type=JvmTypeReference?
		public Alternatives getAlternatives_2_6_2_1_1() { return cAlternatives_2_6_2_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2_6_2_1_1_0() { return cTypeAssignment_2_6_2_1_1_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_0_0; }

		//(final?="val" | "var") type=JvmTypeReference?
		public Group getGroup_2_6_2_1_1_1() { return cGroup_2_6_2_1_1_1; }

		//final?="val" | "var"
		public Alternatives getAlternatives_2_6_2_1_1_1_0() { return cAlternatives_2_6_2_1_1_1_0; }

		//final?="val"
		public Assignment getFinalAssignment_2_6_2_1_1_1_0_0() { return cFinalAssignment_2_6_2_1_1_1_0_0; }

		//"val"
		public Keyword getFinalValKeyword_2_6_2_1_1_1_0_0_0() { return cFinalValKeyword_2_6_2_1_1_1_0_0_0; }

		//"var"
		public Keyword getVarKeyword_2_6_2_1_1_1_0_1() { return cVarKeyword_2_6_2_1_1_1_0_1; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_2_6_2_1_1_1_1() { return cTypeAssignment_2_6_2_1_1_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_2_6_2_1_1_1_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_6_2_1_2() { return cNameAssignment_2_6_2_1_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_6_2_1_2_0() { return cNameValidIDParserRuleCall_2_6_2_1_2_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_2_6_3() { return cGroup_2_6_3; }

		//"="
		public Keyword getEqualsSignKeyword_2_6_3_0() { return cEqualsSignKeyword_2_6_3_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_2_6_3_1() { return cInitialValueAssignment_2_6_3_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_2_6_3_1_0() { return cInitialValueXExpressionParserRuleCall_2_6_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_6_4() { return cSemicolonKeyword_2_6_4; }

		//{xtend::XtendFunction.annotationInfo=current} ("def" | override?="override") visibility=Visibility? static?="static"?
		//dispatch?="dispatch"? ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
		//(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
		//(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
		//name=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=JvmTypeReference (","
		//exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString)?
		public Group getGroup_2_7() { return cGroup_2_7; }

		//{xtend::XtendFunction.annotationInfo=current}
		public Action getXtendFunctionAnnotationInfoAction_2_7_0() { return cXtendFunctionAnnotationInfoAction_2_7_0; }

		//"def" | override?="override"
		public Alternatives getAlternatives_2_7_1() { return cAlternatives_2_7_1; }

		//"def"
		public Keyword getDefKeyword_2_7_1_0() { return cDefKeyword_2_7_1_0; }

		//override?="override"
		public Assignment getOverrideAssignment_2_7_1_1() { return cOverrideAssignment_2_7_1_1; }

		//"override"
		public Keyword getOverrideOverrideKeyword_2_7_1_1_0() { return cOverrideOverrideKeyword_2_7_1_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2_7_2() { return cVisibilityAssignment_2_7_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_2_7_2_0() { return cVisibilityVisibilityEnumRuleCall_2_7_2_0; }

		//static?="static"?
		public Assignment getStaticAssignment_2_7_3() { return cStaticAssignment_2_7_3; }

		//"static"
		public Keyword getStaticStaticKeyword_2_7_3_0() { return cStaticStaticKeyword_2_7_3_0; }

		//dispatch?="dispatch"?
		public Assignment getDispatchAssignment_2_7_4() { return cDispatchAssignment_2_7_4; }

		//"dispatch"
		public Keyword getDispatchDispatchKeyword_2_7_4_0() { return cDispatchDispatchKeyword_2_7_4_0; }

		//("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")?
		public Group getGroup_2_7_5() { return cGroup_2_7_5; }

		//"<"
		public Keyword getLessThanSignKeyword_2_7_5_0() { return cLessThanSignKeyword_2_7_5_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_7_5_1() { return cTypeParametersAssignment_2_7_5_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_7_5_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_7_5_1_0; }

		//("," typeParameters+=JvmTypeParameter)*
		public Group getGroup_2_7_5_2() { return cGroup_2_7_5_2; }

		//","
		public Keyword getCommaKeyword_2_7_5_2_0() { return cCommaKeyword_2_7_5_2_0; }

		//typeParameters+=JvmTypeParameter
		public Assignment getTypeParametersAssignment_2_7_5_2_1() { return cTypeParametersAssignment_2_7_5_2_1; }

		//JvmTypeParameter
		public RuleCall getTypeParametersJvmTypeParameterParserRuleCall_2_7_5_2_1_0() { return cTypeParametersJvmTypeParameterParserRuleCall_2_7_5_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_7_5_3() { return cGreaterThanSignKeyword_2_7_5_3; }

		//=> (returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
		//(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
		//name=ValidID "("
		public Alternatives getAlternatives_2_7_6() { return cAlternatives_2_7_6; }

		//=> (returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(")
		public Group getGroup_2_7_6_0() { return cGroup_2_7_6_0; }

		//returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "("
		public Group getGroup_2_7_6_0_0() { return cGroup_2_7_6_0_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_2_7_6_0_0_0() { return cReturnTypeAssignment_2_7_6_0_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_0_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_0_0_0_0; }

		//createExtensionInfo=CreateExtensionInfo
		public Assignment getCreateExtensionInfoAssignment_2_7_6_0_0_1() { return cCreateExtensionInfoAssignment_2_7_6_0_0_1; }

		//CreateExtensionInfo
		public RuleCall getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_0_0_1_0() { return cCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_7_6_0_0_2() { return cNameAssignment_2_7_6_0_0_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_7_6_0_0_2_0() { return cNameValidIDParserRuleCall_2_7_6_0_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_7_6_0_0_3() { return cLeftParenthesisKeyword_2_7_6_0_0_3; }

		//=> (returnType=JvmTypeReference name=ValidID "(")
		public Group getGroup_2_7_6_1() { return cGroup_2_7_6_1; }

		//returnType=JvmTypeReference name=ValidID "("
		public Group getGroup_2_7_6_1_0() { return cGroup_2_7_6_1_0; }

		//returnType=JvmTypeReference
		public Assignment getReturnTypeAssignment_2_7_6_1_0_0() { return cReturnTypeAssignment_2_7_6_1_0_0; }

		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_1_0_0_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_2_7_6_1_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_7_6_1_0_1() { return cNameAssignment_2_7_6_1_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_7_6_1_0_1_0() { return cNameValidIDParserRuleCall_2_7_6_1_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_7_6_1_0_2() { return cLeftParenthesisKeyword_2_7_6_1_0_2; }

		//=> (createExtensionInfo=CreateExtensionInfo name=ValidID "(")
		public Group getGroup_2_7_6_2() { return cGroup_2_7_6_2; }

		//createExtensionInfo=CreateExtensionInfo name=ValidID "("
		public Group getGroup_2_7_6_2_0() { return cGroup_2_7_6_2_0; }

		//createExtensionInfo=CreateExtensionInfo
		public Assignment getCreateExtensionInfoAssignment_2_7_6_2_0_0() { return cCreateExtensionInfoAssignment_2_7_6_2_0_0; }

		//CreateExtensionInfo
		public RuleCall getCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_2_0_0_0() { return cCreateExtensionInfoCreateExtensionInfoParserRuleCall_2_7_6_2_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_7_6_2_0_1() { return cNameAssignment_2_7_6_2_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_7_6_2_0_1_0() { return cNameValidIDParserRuleCall_2_7_6_2_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_7_6_2_0_2() { return cLeftParenthesisKeyword_2_7_6_2_0_2; }

		//name=ValidID "("
		public Group getGroup_2_7_6_3() { return cGroup_2_7_6_3; }

		//name=ValidID
		public Assignment getNameAssignment_2_7_6_3_0() { return cNameAssignment_2_7_6_3_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_7_6_3_0_0() { return cNameValidIDParserRuleCall_2_7_6_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_7_6_3_1() { return cLeftParenthesisKeyword_2_7_6_3_1; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_2_7_7() { return cGroup_2_7_7; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_7_7_0() { return cParametersAssignment_2_7_7_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_7_7_0_0() { return cParametersParameterParserRuleCall_2_7_7_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_2_7_7_1() { return cGroup_2_7_7_1; }

		//","
		public Keyword getCommaKeyword_2_7_7_1_0() { return cCommaKeyword_2_7_7_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_7_7_1_1() { return cParametersAssignment_2_7_7_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_7_7_1_1_0() { return cParametersParameterParserRuleCall_2_7_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_7_8() { return cRightParenthesisKeyword_2_7_8; }

		//("throws" exceptions+=JvmTypeReference ("," exceptions+=JvmTypeReference)*)?
		public Group getGroup_2_7_9() { return cGroup_2_7_9; }

		//"throws"
		public Keyword getThrowsKeyword_2_7_9_0() { return cThrowsKeyword_2_7_9_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_2_7_9_1() { return cExceptionsAssignment_2_7_9_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_2_7_9_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_2_7_9_1_0; }

		//("," exceptions+=JvmTypeReference)*
		public Group getGroup_2_7_9_2() { return cGroup_2_7_9_2; }

		//","
		public Keyword getCommaKeyword_2_7_9_2_0() { return cCommaKeyword_2_7_9_2_0; }

		//exceptions+=JvmTypeReference
		public Assignment getExceptionsAssignment_2_7_9_2_1() { return cExceptionsAssignment_2_7_9_2_1; }

		//JvmTypeReference
		public RuleCall getExceptionsJvmTypeReferenceParserRuleCall_2_7_9_2_1_0() { return cExceptionsJvmTypeReferenceParserRuleCall_2_7_9_2_1_0; }

		//(expression=XBlockExpression | expression=RichString)?
		public Alternatives getAlternatives_2_7_10() { return cAlternatives_2_7_10; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2_7_10_0() { return cExpressionAssignment_2_7_10_0; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_7_10_0_0() { return cExpressionXBlockExpressionParserRuleCall_2_7_10_0_0; }

		//expression=RichString
		public Assignment getExpressionAssignment_2_7_10_1() { return cExpressionAssignment_2_7_10_1; }

		//RichString
		public RuleCall getExpressionRichStringParserRuleCall_2_7_10_1_0() { return cExpressionRichStringParserRuleCall_2_7_10_1_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXDoWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAssertionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
		//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//	XParenthesizedExpression | Assertion;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression |
		//XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//XParenthesizedExpression | Assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_7() { return cXWhileExpressionParserRuleCall_7; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_8() { return cXDoWhileExpressionParserRuleCall_8; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_9() { return cXThrowExpressionParserRuleCall_9; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_11() { return cXTryCatchFinallyExpressionParserRuleCall_11; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_12() { return cXParenthesizedExpressionParserRuleCall_12; }

		//Assertion
		public RuleCall getAssertionParserRuleCall_13() { return cAssertionParserRuleCall_13; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXClosureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBooleanLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXTypeLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////	| MockLiteral 
		//XLiteral returns xbase::XExpression:
		//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_0() { return cXClosureParserRuleCall_0; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_1() { return cXBooleanLiteralParserRuleCall_1; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_2() { return cXNumberLiteralParserRuleCall_2; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_3() { return cXNullLiteralParserRuleCall_3; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_4() { return cXStringLiteralParserRuleCall_4; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_5() { return cXTypeLiteralParserRuleCall_5; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cShouldLeftOperandAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0 = (RuleCall)cRightOperandAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cShouldThrowExpressionAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_0_0_1_0 = (Group)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Keyword cShouldKeyword_1_1_0_0_1_0_0 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(0);
		private final Keyword cThrowKeyword_1_1_0_0_1_0_1 = (Keyword)cGroup_1_1_0_0_1_0.eContents().get(1);
		private final Keyword cThrowsKeyword_1_1_0_0_1_1 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_0_0 = (Group)cGroup_1_3_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_3_0_0_0 = (Action)cGroup_1_3_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_3_0_0_1 = (Assignment)cGroup_1_3_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0 = (CrossReference)cFeatureAssignment_1_3_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0 = (RuleCall)cRightOperandAssignment_1_3_1.eContents().get(0);
		
		////MockLiteral:
		////	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
		////;
		//XRelationalExpression returns xbase::XExpression:
		//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) =>
		//	rightOperand=XOtherOperatorExpression? | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//	({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//	rightOperand=XOtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) =>
		//rightOperand=XOtherOperatorExpression? | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		//type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) =>
		//rightOperand=XOtherOperatorExpression? | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		//type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
		//({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) =>
		//rightOperand=XOtherOperatorExpression?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should])
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Should.leftOperand=current}
		public Action getShouldLeftOperandAction_1_0_0_0_0() { return cShouldLeftOperandAction_1_0_0_0_0; }

		//feature=[types::JvmIdentifiableElement|Should]
		public Assignment getFeatureAssignment_1_0_0_0_1() { return cFeatureAssignment_1_0_0_0_1; }

		//[types::JvmIdentifiableElement|Should]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_1_0; }

		//Should
		public RuleCall getFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1() { return cFeatureJvmIdentifiableElementShouldParserRuleCall_1_0_0_0_1_0_1; }

		//=> rightOperand=XOtherOperatorExpression?
		public Assignment getRightOperandAssignment_1_0_1() { return cRightOperandAssignment_1_0_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_0_1_0; }

		//=> ({ShouldThrow.expression=current} ("should" "throw" | "throws")) type=JvmTypeReference
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{ShouldThrow.expression=current} ("should" "throw" | "throws")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{ShouldThrow.expression=current}
		public Action getShouldThrowExpressionAction_1_1_0_0_0() { return cShouldThrowExpressionAction_1_1_0_0_0; }

		//"should" "throw" | "throws"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"should" "throw"
		public Group getGroup_1_1_0_0_1_0() { return cGroup_1_1_0_0_1_0; }

		//"should"
		public Keyword getShouldKeyword_1_1_0_0_1_0_0() { return cShouldKeyword_1_1_0_0_1_0_0; }

		//"throw"
		public Keyword getThrowKeyword_1_1_0_0_1_0_1() { return cThrowKeyword_1_1_0_0_1_0_1; }

		//"throws"
		public Keyword getThrowsKeyword_1_1_0_0_1_1() { return cThrowsKeyword_1_1_0_0_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_1_0; }

		//=> ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({xbase::XInstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//{xbase::XInstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{xbase::XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_2_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_2_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_2_0_0_1() { return cInstanceofKeyword_1_2_0_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_2_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_2_1_0; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		//rightOperand=XOtherOperatorExpression
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//{xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]
		public Group getGroup_1_3_0_0() { return cGroup_1_3_0_0; }

		//{xbase::XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_3_0_0_0() { return cXBinaryOperationLeftOperandAction_1_3_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpCompare]
		public Assignment getFeatureAssignment_1_3_0_0_1() { return cFeatureAssignment_1_3_0_0_1; }

		//[types::JvmIdentifiableElement|OpCompare]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_3_0_0_1_0; }

		//OpCompare
		public RuleCall getFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpCompareParserRuleCall_1_3_0_0_1_0_1; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_3_1() { return cRightOperandAssignment_1_3_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_3_1_0; }
	}

	public class ShouldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Should");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShouldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Should:
		//	"should" "not"? ID;
		public ParserRule getRule() { return rule; }

		//"should" "not"? ID
		public Group getGroup() { return cGroup; }

		//"should"
		public Keyword getShouldKeyword_0() { return cShouldKeyword_0; }

		//"not"?
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssertKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assertion returns xbase::XExpression:
		//	{Assertion} "assert" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{Assertion} "assert" expression=XExpression
		public Group getGroup() { return cGroup; }

		//{Assertion}
		public Action getAssertionAction_0() { return cAssertionAction_0; }

		//"assert"
		public Keyword getAssertKeyword_1() { return cAssertKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class ExampleColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExampleColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExampleColumn:
		//	type=JvmTypeReference? name=ValidID "|";
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference? name=ValidID "|"
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class ExampleRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExampleRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExampleRowAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCellsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCellsXExpressionParserRuleCall_2_0_0 = (RuleCall)cCellsAssignment_2_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ExampleRow:
		//	"|" {ExampleRow} (cells+=XExpression "|")*;
		public ParserRule getRule() { return rule; }

		//"|" {ExampleRow} (cells+=XExpression "|")*
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//{ExampleRow}
		public Action getExampleRowAction_1() { return cExampleRowAction_1; }

		//(cells+=XExpression "|")*
		public Group getGroup_2() { return cGroup_2; }

		//cells+=XExpression
		public Assignment getCellsAssignment_2_0() { return cCellsAssignment_2_0; }

		//XExpression
		public RuleCall getCellsXExpressionParserRuleCall_2_0_0() { return cCellsXExpressionParserRuleCall_2_0_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }
	}
	
	
	private SpecFileElements pSpecFile;
	private ExampleGroupElements pExampleGroup;
	private MethodElements pMethod;
	private TypeNameElements pTypeName;
	private TypeRefElements pTypeRef;
	private MemberElements pMember;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XLiteralElements pXLiteral;
	private XRelationalExpressionElements pXRelationalExpression;
	private ShouldElements pShould;
	private AssertionElements pAssertion;
	private ExampleColumnElements pExampleColumn;
	private ExampleRowElements pExampleRow;
	private TerminalRule tML_COMMENT;
	
	private final Grammar grammar;

	private XtendGrammarAccess gaXtend;

	@Inject
	public SpecGrammarAccess(GrammarProvider grammarProvider,
		XtendGrammarAccess gaXtend) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtend = gaXtend;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.jnario.spec.Spec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XtendGrammarAccess getXtendGrammarAccess() {
		return gaXtend;
	}

	
	//SpecFile:
	//	{SpecFile} ("package" package=QualifiedName)? imports+=Import* xtendClasses+=ExampleGroup*;
	public SpecFileElements getSpecFileAccess() {
		return (pSpecFile != null) ? pSpecFile : (pSpecFile = new SpecFileElements());
	}
	
	public ParserRule getSpecFileRule() {
		return getSpecFileAccess().getRule();
	}

	//ExampleGroup:
	//	{ExampleGroup} annotations+=XAnnotation* preamble="describe" targetType=JvmTypeReference? name=STRING? "{"
	//	members+=Member* "}";
	public ExampleGroupElements getExampleGroupAccess() {
		return (pExampleGroup != null) ? pExampleGroup : (pExampleGroup = new ExampleGroupElements());
	}
	
	public ParserRule getExampleGroupRule() {
		return getExampleGroupAccess().getRule();
	}

	//Method:
	//	ID ("(" (TypeName ("," TypeName)*)? ")")?;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//TypeName:
	//	ID ("<" TypeRef ("," TypeRef)* ">")? ("[" "]")?;
	public TypeNameElements getTypeNameAccess() {
		return (pTypeName != null) ? pTypeName : (pTypeName = new TypeNameElements());
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//TypeRef:
	//	"?"? ("extends" | "super")? TypeName;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//Member returns xtend::XtendMember:
	//	{xtend::XtendMember} annotations+=XAnnotation* ({Example.annotationInfo=current} (pending?="pending"? ("fact" |
	//	"facts") expr=XExpression expression=XBlockExpression?) | {ExampleGroup.annotationInfo=current} (preamble="describe"
	//	targetType=JvmTypeReference? name=STRING? "{" members+=Member* "}") | {Before.annotationInfo=current} ("before"
	//	(static?="all" | "each")? => name=STRING? expression=XExpression) | {After.annotationInfo=current} ("after"
	//	(static?="all" | "each")? => name=STRING? expression=XExpression) | {ExampleGroup.annotationInfo=current}
	//	(preamble="context" targetOperation=[types::JvmOperation|Method]? name=STRING? "{" members+=Member* "}") |
	//	{ExampleTable.annotationInfo=current} ("def" name=ID? "{" ("|" columns+=ExampleColumn* rows+=ExampleRow*)? "}") |
	//	{xtend::XtendField.annotationInfo=current} visibility=Visibility? (extension?="extension" static?="static"?
	//	(final?="val" | "var")? type=JvmTypeReference name=ValidID? | static?="static"? (type=JvmTypeReference | (final?="val"
	//	| "var") type=JvmTypeReference?) name=ValidID) ("=" initialValue=XExpression)? ";"? |
	//	{xtend::XtendFunction.annotationInfo=current} ("def" | override?="override") visibility=Visibility? static?="static"?
	//	dispatch?="dispatch"? ("<" typeParameters+=JvmTypeParameter ("," typeParameters+=JvmTypeParameter)* ">")? (=>
	//	(returnType=JvmTypeReference createExtensionInfo=CreateExtensionInfo name=ValidID "(") | =>
	//	(returnType=JvmTypeReference name=ValidID "(") | => (createExtensionInfo=CreateExtensionInfo name=ValidID "(") |
	//	name=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=JvmTypeReference
	//	("," exceptions+=JvmTypeReference)*)? (expression=XBlockExpression | expression=RichString)?);
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression | Assertion;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	////	| MockLiteral 
	//XLiteral returns xbase::XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////MockLiteral:
	////	{MockLiteral} ('mock'|'stub') '(' type=[types::JvmType|QualifiedName] ')'
	////;
	//XRelationalExpression returns xbase::XExpression:
	//	XOtherOperatorExpression (=> ({Should.leftOperand=current} feature=[types::JvmIdentifiableElement|Should]) =>
	//	rightOperand=XOtherOperatorExpression? | => ({ShouldThrow.expression=current} ("should" "throw" | "throws"))
	//	type=JvmTypeReference | => ({xbase::XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return (pXRelationalExpression != null) ? pXRelationalExpression : (pXRelationalExpression = new XRelationalExpressionElements());
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//Should:
	//	"should" "not"? ID;
	public ShouldElements getShouldAccess() {
		return (pShould != null) ? pShould : (pShould = new ShouldElements());
	}
	
	public ParserRule getShouldRule() {
		return getShouldAccess().getRule();
	}

	//Assertion returns xbase::XExpression:
	//	{Assertion} "assert" expression=XExpression;
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	//ExampleColumn:
	//	type=JvmTypeReference? name=ValidID "|";
	public ExampleColumnElements getExampleColumnAccess() {
		return (pExampleColumn != null) ? pExampleColumn : (pExampleColumn = new ExampleColumnElements());
	}
	
	public ParserRule getExampleColumnRule() {
		return getExampleColumnAccess().getRule();
	}

	//ExampleRow:
	//	"|" {ExampleRow} (cells+=XExpression "|")*;
	public ExampleRowElements getExampleRowAccess() {
		return (pExampleRow != null) ? pExampleRow : (pExampleRow = new ExampleRowElements());
	}
	
	public ParserRule getExampleRowRule() {
		return getExampleRowAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->(!"\\" "* /");
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//File returns XtendFile:
	//	("package" package=QualifiedName ";"?)? imports+=Import* xtendClasses+=Class*;
	public XtendGrammarAccess.FileElements getFileAccess() {
		return gaXtend.getFileAccess();
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Import returns XtendImport:
	//	"import" (static?="static" extension?="extension"? importedType=[types::JvmType|QualifiedName] "." "*" |
	//	importedType=[types::JvmType|QualifiedName] | importedNamespace=QualifiedNameWithWildCard) ";"?;
	public XtendGrammarAccess.ImportElements getImportAccess() {
		return gaXtend.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName "." "*";
	public XtendGrammarAccess.QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return gaXtend.getQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Class returns XtendClass:
	//	annotations+=XAnnotation* "public"? abstract?="abstract"? "class" name=ValidID ("<" typeParameters+=JvmTypeParameter
	//	("," typeParameters+=JvmTypeParameter)* ">")? ("extends" extends=JvmParameterizedTypeReference)? ("implements"
	//	implements+=JvmParameterizedTypeReference ("," implements+=JvmParameterizedTypeReference)*)? "{" members+=Member* "}";
	public XtendGrammarAccess.ClassElements getClassAccess() {
		return gaXtend.getClassAccess();
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//CreateExtensionInfo:
	//	"create" (name=ValidID ":")? createExpression=XExpression;
	public XtendGrammarAccess.CreateExtensionInfoElements getCreateExtensionInfoAccess() {
		return gaXtend.getCreateExtensionInfoAccess();
	}
	
	public ParserRule getCreateExtensionInfoRule() {
		return getCreateExtensionInfoAccess().getRule();
	}

	//ValidID:
	//	ID | "create";
	public XtendGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtend.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//Parameter returns XtendParameter:
	//	annotations+=XAnnotation* parameterType=JvmTypeReference varArg?="..."? name=ValidID;
	public XtendGrammarAccess.ParameterElements getParameterAccess() {
		return gaXtend.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//enum Visibility returns types::JvmVisibility:
	//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private";
	public XtendGrammarAccess.VisibilityElements getVisibilityAccess() {
		return gaXtend.getVisibilityAccess();
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//XStringLiteral returns xbase::XExpression:
	//	SimpleStringLiteral | RichString;
	public XtendGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXtend.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//SimpleStringLiteral returns xbase::XExpression:
	//	{xbase::XStringLiteral} value=STRING;
	public XtendGrammarAccess.SimpleStringLiteralElements getSimpleStringLiteralAccess() {
		return gaXtend.getSimpleStringLiteralAccess();
	}
	
	public ParserRule getSimpleStringLiteralRule() {
		return getSimpleStringLiteralAccess().getRule();
	}

	//RichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteral | expressions+=RichStringLiteralStart expressions+=RichStringPart?
	//	(expressions+=RichStringLiteralInbetween expressions+=RichStringPart?)* expressions+=RichStringLiteralEnd);
	public XtendGrammarAccess.RichStringElements getRichStringAccess() {
		return gaXtend.getRichStringAccess();
	}
	
	public ParserRule getRichStringRule() {
		return getRichStringAccess().getRule();
	}

	//RichStringLiteral returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT;
	public XtendGrammarAccess.RichStringLiteralElements getRichStringLiteralAccess() {
		return gaXtend.getRichStringLiteralAccess();
	}
	
	public ParserRule getRichStringLiteralRule() {
		return getRichStringLiteralAccess().getRule();
	}

	//RichStringLiteralStart returns xbase::XExpression:
	//	{RichStringLiteral} value=RICH_TEXT_START;
	public XtendGrammarAccess.RichStringLiteralStartElements getRichStringLiteralStartAccess() {
		return gaXtend.getRichStringLiteralStartAccess();
	}
	
	public ParserRule getRichStringLiteralStartRule() {
		return getRichStringLiteralStartAccess().getRule();
	}

	//RichStringLiteralInbetween returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_INBETWEEN | value=COMMENT_RICH_TEXT_INBETWEEN);
	public XtendGrammarAccess.RichStringLiteralInbetweenElements getRichStringLiteralInbetweenAccess() {
		return gaXtend.getRichStringLiteralInbetweenAccess();
	}
	
	public ParserRule getRichStringLiteralInbetweenRule() {
		return getRichStringLiteralInbetweenAccess().getRule();
	}

	//RichStringLiteralEnd returns xbase::XExpression:
	//	{RichStringLiteral} (value=RICH_TEXT_END | value=COMMENT_RICH_TEXT_END);
	public XtendGrammarAccess.RichStringLiteralEndElements getRichStringLiteralEndAccess() {
		return gaXtend.getRichStringLiteralEndAccess();
	}
	
	public ParserRule getRichStringLiteralEndRule() {
		return getRichStringLiteralEndAccess().getRule();
	}

	//InternalRichString returns xbase::XExpression:
	//	{RichString} (expressions+=RichStringLiteralInbetween (expressions+=RichStringPart?
	//	expressions+=RichStringLiteralInbetween)*);
	public XtendGrammarAccess.InternalRichStringElements getInternalRichStringAccess() {
		return gaXtend.getInternalRichStringAccess();
	}
	
	public ParserRule getInternalRichStringRule() {
		return getInternalRichStringAccess().getRule();
	}

	//RichStringPart returns xbase::XExpression:
	//	XExpressionInsideBlock | RichStringForLoop | RichStringIf;
	public XtendGrammarAccess.RichStringPartElements getRichStringPartAccess() {
		return gaXtend.getRichStringPartAccess();
	}
	
	public ParserRule getRichStringPartRule() {
		return getRichStringPartAccess().getRule();
	}

	//RichStringForLoop returns xbase::XExpression:
	//	{RichStringForLoop} "FOR" declaredParam=JvmFormalParameter ":" forExpression=XExpression ("BEFORE"
	//	before=XExpression)? ("SEPARATOR" separator=XExpression)? ("AFTER" after=XExpression)?
	//	eachExpression=InternalRichString "ENDFOR";
	public XtendGrammarAccess.RichStringForLoopElements getRichStringForLoopAccess() {
		return gaXtend.getRichStringForLoopAccess();
	}
	
	public ParserRule getRichStringForLoopRule() {
		return getRichStringForLoopAccess().getRule();
	}

	//RichStringIf returns xbase::XExpression:
	//	{RichStringIf} "IF" if=XExpression then=InternalRichString elseIfs+=RichStringElseIf* ("ELSE"
	//	else=InternalRichString)? "ENDIF";
	public XtendGrammarAccess.RichStringIfElements getRichStringIfAccess() {
		return gaXtend.getRichStringIfAccess();
	}
	
	public ParserRule getRichStringIfRule() {
		return getRichStringIfAccess().getRule();
	}

	//RichStringElseIf:
	//	"ELSEIF" if=XExpression then=InternalRichString;
	public XtendGrammarAccess.RichStringElseIfElements getRichStringElseIfAccess() {
		return gaXtend.getRichStringElseIfAccess();
	}
	
	public ParserRule getRichStringElseIfRule() {
		return getRichStringElseIfAccess().getRule();
	}

	//terminal RICH_TEXT:
	//	"\'\'\'" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXTRule() {
		return gaXtend.getRICH_TEXTRule();
	} 

	//terminal RICH_TEXT_START:
	//	"\'\'\'" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaXtend.getRICH_TEXT_STARTRule();
	} 

	//terminal RICH_TEXT_END:
	//	"»" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF);
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaXtend.getRICH_TEXT_ENDRule();
	} 

	//terminal RICH_TEXT_INBETWEEN:
	//	"»" IN_RICH_STRING* ("\'" "\'"?)? "«";
	public TerminalRule getRICH_TEXT_INBETWEENRule() {
		return gaXtend.getRICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_INBETWEEN:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'" "\'"?)? "«")?;
	public TerminalRule getCOMMENT_RICH_TEXT_INBETWEENRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_INBETWEENRule();
	} 

	//terminal COMMENT_RICH_TEXT_END:
	//	"««" !("\n" | "\r")* ("\r"? "\n" IN_RICH_STRING* ("\'\'\'" | ("\'" "\'"?)? EOF) | EOF);
	public TerminalRule getCOMMENT_RICH_TEXT_ENDRule() {
		return gaXtend.getCOMMENT_RICH_TEXT_ENDRule();
	} 

	//terminal fragment IN_RICH_STRING:
	//	"\'\'" !("«" | "\'") | "\'" !("«" | "\'") | !("«" | "\'");
	public TerminalRule getIN_RICH_STRINGRule() {
		return gaXtend.getIN_RICH_STRINGRule();
	} 

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXtend.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXtend.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXtend.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXtend.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXtend.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXtend.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXtend.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXtend.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXtend.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXtend.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXtend.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXtend.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXtend.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXtend.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXtend.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXtend.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXtend.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXtend.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXtend.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXtend.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXtend.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXtend.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXtend.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXtend.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXtend.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXtend.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXtend.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXtend.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXtend.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXtend.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXtend.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXtend.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXtend.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXtend.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXtend.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXtend.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXtend.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXtend.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXtend.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXtend.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXtend.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXtend.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXtend.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXtend.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXtend.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXtend.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXtend.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXtend.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXtend.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXtend.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXtend.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXtend.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXtend.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXtend.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtend.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXtend.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXtend.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXtend.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXtend.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtend.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtend.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtend.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtend.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtend.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtend.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtend.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtend.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtend.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtend.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXtend.getSTRINGRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtend.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtend.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtend.getANY_OTHERRule();
	} 
}
